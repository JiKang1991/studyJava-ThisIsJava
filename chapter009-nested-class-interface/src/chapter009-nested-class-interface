	chapter009 nested-class-interface
	
	-- Table of contents --
		9.1 about nested class and nested interface
		9.2 nested class
		9.3 access modify of nested class
		9.4 nested interface
		9.5 anonymous object
	-----------------------
	
	9.1 about nested class and nested interface
		- 객체 지향 프로그램에서 클래스들은 서로 긴밀한 관계를 맺고 상호작용을 한다.
		- 어떤 클래스는 여러 클래스와 관계를 맺지만 어떤 클래스는 특정 클래스와 관계를 맺는다.
		- 클래스가 여러 클래스와 관계를 맺는 경우에는 독립적으로 선언하는 것이 좋으나
		- 특정 클래스와 관계를 맺을 경우에는 관계클래스를 클래스 내부에 선언하는 것이 좋다.
		- 중첩 클래스란 클래스 내부에 선언한 클래스를 의미한다.
		- 중첩 클래스를 사용하면 두 클래스의 멤버들을 서로 쉽게 접근할 수 있다는 장점과
		  외부에는 불필요한 관계 클래스를 감춤으로써 코드의 복잡성을 줄일 수 있다.
		----------------------------------------------------------
			class ClassName {
				class NestedClassName{
				}
			}
		----------------------------------------------------------
		- 인터페이스도 클래스 내부에 선언할 수 있다. 이런 인터페이스를 중첩 인터페이스라고 한다.
		- 인터페이스를 클래스 내부에 선언하는 이유는 해당 클래스와 긴밀한 관계를 맺는 구현 클래스를 만들기 위해서이다.
		----------------------------------------------------------
			class ClassName {
				interface NestedInterfaceName{
				}
			}
		----------------------------------------------------------
		- 중첩 인터페이스는 주로 UI프로그래밍에서 이벤트를 처리할 목적으로 많이 활용된다.
		
	
	9.2 nested class
		- 중첩 클래스는 클래스 내부에 선언되는 위치에 따라서 두 가지로 분류된다.
		* 멤버 클래스 : 클래스의 멤버로서 선언되는 중첩 클래스, 클래스나 객체가 사용중이라면 언제든지 재사용 가능하다.
		* 로컬 클래스 : 메서드 내부에서 선언되는 중첩 클래스, 메소드 실행 시에만 사용되고, 메소드가 실행 종료되면 없어진다.
		----------------------------------------------------------
			선언 위치에 따른 분류				선언 위치					설명
			멤버 클래스	인스턴스 멤버 클래스		classA {				A 객체를 생성해야만 사용할 수 있는
												classB {...}		B 중첩 클래스
											}
						정적 멤버 클래스		classA {				A 클래스로 바로 접근할 수 있는
												static classB {...}	B 중첩 클래스
											}
			로컬 클래스						classA {				method()가 실행할 때만 사용할 수 있는
												void method() {		B 중첩 클래스
													classB {...}
												}
											}
		----------------------------------------------------------
		- 멤버 클래스도 하나의 클래스이기 때문에 컴피일하면 바이트 코드 파일(.class)이 별도로 생성된다.
			ex) 바깥 클래스$멤버 클래스.class
		- 로컬 클래스일 경우에는 $1이 포함된 바이트 코드 파일이 생성된다.
			ex) 바깥 클래스$1로컬 클래스.class
			
	9.2.1 instance member class
		- 인스턴스 멤버 클래스는 static 키워드 없이 선언된 클래스를 말한다.
		- 인스턴스 필드와 메소드만 선언이 가능하고 정적 필드와 메소드는 선언할 수 없다.
		----------------------------------------------------------
			classA { 
				/** 인스턴스 멤버 클래스 **/
				classB {
					B() { }							// 생성자
					int field1;						// 인스턴스 필드
					// static int field2;			// 정적 필드 (x) 선언할 수 없다.
					void method1() { }				// 인스턴스 메소드
					// static void method2() { }	// 정적 메소드(x) 선언할 수 없다.
				}
			}
		----------------------------------------------------------
		- 클래스 외부에서 인스턴스 멤버 클래스 B의 객체를 생성하려면 먼저 A객체를 생성하고 B객체를 생성해야 한다.
		----------------------------------------------------------
			A a = new A();
			A.B b = a.new B();
			b.field1 = 3;
			b.method1();
		----------------------------------------------------------
		
	9.2.2 static member class
		- 정적 멤버 클래스는 static 키워드로 선언된 클래스를 말한다.
		- 정적 멤버 클래스는 모든 종류의 필드와 메소드를 선언할 수 있다.
		----------------------------------------------------------
			classA { 
				/** 정적 멤버 클래스 **/
				static classC {
					C() { }						// 생성자
					int field1;					// 인스턴스 필드
					static int field2;			// 정적 필드
					void method1() { }			// 인스턴스 메소드
					static void method2() { }	// 정적 메소드
				}
			}
		----------------------------------------------------------
		- A클래스 외부에서 정적 멤버 클래스 C의 객체를 생성하기 위해서는 A 객체를 생성할 필요가 없고, C 객체를 생성하면 된다.
		----------------------------------------------------------
			A.C c = a.new C();
			c.field1 = 3;		// 인스턴스 필드 사용
			c.method1();		// 인스턴스 메소드 사용
			A.C.field2();		// 정적 필드 사용		
			A.C.method2();		// 정적 메소드 호출
		----------------------------------------------------------
		
	9.2.3 local class
		- 중첩 클래스는 메소드 내에서도 선언할 수 있다. 이것을 로컬(local) 클래스라고 한다.
		- 로컬 클래스는 접근 제한자 및 static을 붙일 수 없다, 메소드 내부에서만 사용되므로 접근을 제한할 필요가 없다.
		- 로컬 클래스 내부에는 인스턴스 필드와 메소드만 선언이 가능하고 정적 필드와 메소드는 선언할 수 없다.
		----------------------------------------------------------
			void method() {
				/** 로컬 클래스 **/
				class D {
					D() { }							// 생성자
					int field1;						// 인스턴스 필드
					// static int field2;			// 정적 필드(x) 선언할 수 없다.
					void method1() { }				// 인스턴스 메소드
					// static void method2() { }	// 정적 메소드(x) 선언할 수 없다.
				}
				D d = new D();
				d.field1 = 3;
				d.method1();
			}
		----------------------------------------------------------
		- 로컬 클래스는 메소드가 실행될 때 메소드 내에서 객체를 생성하고 사용해야 한다.
		- 주로 비동기 처리를 위해 스레드 객체를 만들 때 사용한다.
		----------------------------------------------------------
			void method() {
				class Download extends Thread { ... }
				DownloadThread thread = new DownloadThread();
				thread.start();
			}
		----------------------------------------------------------
		참고) AboutNestedClass.A.java,	AboutNestedClass.Main.java