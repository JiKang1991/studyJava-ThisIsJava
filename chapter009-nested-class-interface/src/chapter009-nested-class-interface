	chapter009 nested-class-interface
	
	-- Table of contents --
		9.1 about nested class and nested interface
		9.2 nested class
		9.3 access modify of nested class
		9.4 nested interface
		9.5 anonymous object
	-----------------------
	
	9.1 about nested class and nested interface
		- 객체 지향 프로그램에서 클래스들은 서로 긴밀한 관계를 맺고 상호작용을 한다.
		- 어떤 클래스는 여러 클래스와 관계를 맺지만 어떤 클래스는 특정 클래스와 관계를 맺는다.
		- 클래스가 여러 클래스와 관계를 맺는 경우에는 독립적으로 선언하는 것이 좋으나
		- 특정 클래스와 관계를 맺을 경우에는 관계클래스를 클래스 내부에 선언하는 것이 좋다.
		- 중첩 클래스란 클래스 내부에 선언한 클래스를 의미한다.
		- 중첩 클래스를 사용하면 두 클래스의 멤버들을 서로 쉽게 접근할 수 있다는 장점과
		  외부에는 불필요한 관계 클래스를 감춤으로써 코드의 복잡성을 줄일 수 있다.
		----------------------------------------------------------
			class ClassName {
				class NestedClassName{
				}
			}
		----------------------------------------------------------
		- 인터페이스도 클래스 내부에 선언할 수 있다. 이런 인터페이스를 중첩 인터페이스라고 한다.
		- 인터페이스를 클래스 내부에 선언하는 이유는 해당 클래스와 긴밀한 관계를 맺는 구현 클래스를 만들기 위해서이다.
		----------------------------------------------------------
			class ClassName {
				interface NestedInterfaceName{
				}
			}
		----------------------------------------------------------
		- 중첩 인터페이스는 주로 UI프로그래밍에서 이벤트를 처리할 목적으로 많이 활용된다.
		
	
	9.2 nested class
		- 중첩 클래스는 클래스 내부에 선언되는 위치에 따라서 두 가지로 분류된다.
		* 멤버 클래스 : 클래스의 멤버로서 선언되는 중첩 클래스, 클래스나 객체가 사용중이라면 언제든지 재사용 가능하다.
		* 로컬 클래스 : 메서드 내부에서 선언되는 중첩 클래스, 메소드 실행 시에만 사용되고, 메소드가 실행 종료되면 없어진다.
		----------------------------------------------------------
			선언 위치에 따른 분류				선언 위치					설명
			멤버 클래스	인스턴스 멤버 클래스		classA {				A 객체를 생성해야만 사용할 수 있는
												classB {...}		B 중첩 클래스
											}
						정적 멤버 클래스		classA {				A 클래스로 바로 접근할 수 있는
												static classB {...}	B 중첩 클래스
											}
			로컬 클래스						classA {				method()가 실행할 때만 사용할 수 있는
												void method() {		B 중첩 클래스
													classB {...}
												}
											}
		----------------------------------------------------------
		- 멤버 클래스도 하나의 클래스이기 때문에 컴피일하면 바이트 코드 파일(.class)이 별도로 생성된다.
			ex) 바깥 클래스$멤버 클래스.class
		- 로컬 클래스일 경우에는 $1이 포함된 바이트 코드 파일이 생성된다.
			ex) 바깥 클래스$1로컬 클래스.class
			
	9.2.1 instance member class
		- 인스턴스 멤버 클래스는 static 키워드 없이 선언된 클래스를 말한다.
		- 인스턴스 필드와 메소드만 선언이 가능하고 정적 필드와 메소드는 선언할 수 없다.
		----------------------------------------------------------
			classA { 
				/** 인스턴스 멤버 클래스 **/
				classB {
					B() { }							// 생성자
					int field1;						// 인스턴스 필드
					// static int field2;			// 정적 필드 (x) 선언할 수 없다.
					void method1() { }				// 인스턴스 메소드
					// static void method2() { }	// 정적 메소드(x) 선언할 수 없다.
				}
			}
		----------------------------------------------------------
		- 클래스 외부에서 인스턴스 멤버 클래스 B의 객체를 생성하려면 먼저 A객체를 생성하고 B객체를 생성해야 한다.
		----------------------------------------------------------
			A a = new A();
			A.B b = a.new B();
			b.field1 = 3;
			b.method1();
		----------------------------------------------------------
		
	9.2.2 static member class
		- 정적 멤버 클래스는 static 키워드로 선언된 클래스를 말한다.
		- 정적 멤버 클래스는 모든 종류의 필드와 메소드를 선언할 수 있다.
		----------------------------------------------------------
			classA { 
				/** 정적 멤버 클래스 **/
				static classC {
					C() { }						// 생성자
					int field1;					// 인스턴스 필드
					static int field2;			// 정적 필드
					void method1() { }			// 인스턴스 메소드
					static void method2() { }	// 정적 메소드
				}
			}
		----------------------------------------------------------
		- A클래스 외부에서 정적 멤버 클래스 C의 객체를 생성하기 위해서는 A 객체를 생성할 필요가 없고, C 객체를 생성하면 된다.
		----------------------------------------------------------
			A.C c = a.new C();
			c.field1 = 3;		// 인스턴스 필드 사용
			c.method1();		// 인스턴스 메소드 사용
			A.C.field2();		// 정적 필드 사용		
			A.C.method2();		// 정적 메소드 호출
		----------------------------------------------------------
		
	9.2.3 local class
		- 중첩 클래스는 메소드 내에서도 선언할 수 있다. 이것을 로컬(local) 클래스라고 한다.
		- 로컬 클래스는 접근 제한자 및 static을 붙일 수 없다, 메소드 내부에서만 사용되므로 접근을 제한할 필요가 없다.
		- 로컬 클래스 내부에는 인스턴스 필드와 메소드만 선언이 가능하고 정적 필드와 메소드는 선언할 수 없다.
		----------------------------------------------------------
			void method() {
				/** 로컬 클래스 **/
				class D {
					D() { }							// 생성자
					int field1;						// 인스턴스 필드
					// static int field2;			// 정적 필드(x) 선언할 수 없다.
					void method1() { }				// 인스턴스 메소드
					// static void method2() { }	// 정적 메소드(x) 선언할 수 없다.
				}
				D d = new D();
				d.field1 = 3;
				d.method1();
			}
		----------------------------------------------------------
		- 로컬 클래스는 메소드가 실행될 때 메소드 내에서 객체를 생성하고 사용해야 한다.
		- 주로 비동기 처리를 위해 스레드 객체를 만들 때 사용한다.
		----------------------------------------------------------
			void method() {
				class Download extends Thread { ... }
				DownloadThread thread = new DownloadThread();
				thread.start();
			}
		----------------------------------------------------------
		참고) AboutNestedClass.A.java,	AboutNestedClass.Main.java
		
		
	9.3 access constraint of nested class
	9.3.1 access constraint at outter class and method 
		- 멤버 클래스가 인스턴스 또는 정적으로 선언됨에 따라 바깥 클래스의 필드와 메소드에 사용 제한이 생긴다.
		- 인스턴스 멤버 클래스는 바깥 클래스의 인스턴스 필드의 초기값이나 인스턴스 메소드에서 객체를 생성할 수 있으나,
		  정적 필드의 초기값이나 정적 메소드에서는 객체를 생성할 수 없다.
		- 정적 멤버 클래스는 모든 필드의 초기값이나 모든 메소드에서 객체를 생성할 수 있다.
		참고) accessConstraintOfNestedClass.AtOutterClassMethod.java
		
	9.3.2 access constraint at member class
		- 멤버 클래스가 인스턴스 또는 정적으로 선언됨에 따라 멤버 클래스 내부에서 바깥 클래스의 필드와 메소드를
		  접근할 때에도 제한이 따른다.
		- 인스턴스 멤버 클래스 안에선느 바깥 클래스의 모든 필드와 모든 메소드에 접근할 수 있지만,
		  정적 멤버 클래스 안에서는 바깥 클래스의 정적 필드와 메소드에만 접근할수 있고 인스턴스 필드와 메소드에는
		  접근할 수 없다.
		참고) accessConstraintOfNestedClass.AtMemberClass.java
		
	9.3.3 access constraint at local class
		- 로컬 클래스 내부에서는 바깥 클래스의 필드나 메소드를 제한 없이 사용할 수 있다.
		- 문제는 메소드의 매개 변수나 로컬 변수를 로컬 클래스에서 사용할 때이다.
		- 로컬 클래스의 객체는 메소드 실행이 끝나도 힙 메모리에 존재해서 계속 사용될 수 있다.
		- 매개 변수나 로컬 변수는 메소드 실행이 끝나며 스택 메모리에서 사라지기 때문에
		  로컬 객체에서 사용할 경우 문제가 발생한다.
		- 자바는 이 문제를 해결하기 위해 컴파일 시 로컬 클래스에서 사용하는 매개 변수나 로컬 변수의 값을
		  로컬 클래스 내부에 복사해 두고 사용한다.
		- 매개 변수나 로컬 변수가 수정되어 값이 변경되면 복사해 둔 값과 달라지는 문제를 해셜하기 위해
		  매개 변수나 로컬 변수를 final로 선언해서 수정을 막는다.
		- 결론적으로 로컬 클래스에서 사용 가능한 것은 final로 선언된 매개 변수와 로컬 변수뿐이다.
		- 자바 8 부터는 final 키워드 선언을 하지 않아도 final의 특성을 갖는다.
		- final 키워드가 존재하면 로컬 클래스의 메소드 내부에 지역변수로 복사한다.
		- final 키워드가 없다면 로컬 클래스의 필드로 복사한다.
		----------------------------------------------------------
			void outMethod(final int arg1, int arg2) {
				final int var1 = 1;
				int var2 = 2;
				class LocalClass {
					void method() {
						int result = arg1 + arg2 + var1 + var2;
					}
				}
			}
									|
									V
			class LocalClass {
				int arg2 = 매개값;		// 필드로 복사
				int var2 = 2;			// 필드로 복사
				void method() {
					int arg1 = 매개값;	// 로컬 변수로 복사
					int var1 = 1;		// 로컬 변수로 복사
					int result = arg1 + arg2 + var1 + var2;
				}
			}
		----------------------------------------------------------
		참고) accessConstraintOfNestedClass.AtLocalClass.java
		
	9.3.4 get reference of outter class at nested class
		- 클래스 내부에서 this는 객체 자신의 참조이다.
		- 중첩 클래스에서 this 키워드를 사용하면 바깥 클래스의 객체 참조가 아니라, 중첩 클래스의 객체 참조가 된다.
		- 중첩 클래스 내부에서 바깥 클래스의 객체 참조를 얻으려면 바깥 클래스의 이름을 this 앞에 붙여주면 된다.
			ex) 바깥클래스.this.필드	/	바깥클래스.this.메소드();
		참고) accessConstraintOfNestedClass.GetReferenceOfOutters.java
			 accessConstraintOfNestedClass.GetReferenceOfOuttersRuntime.java
			 
	
	9.4 nested interface
		- 중첩 인터페이스는 클래스의 멤버로 선언된 인터페이스를 말한다.
		- 인터페이스를 클래스 내부에 선언하는 이유는 해당 클래스와 긴밀한 관계를 맺는 구현 클래스를 만들기 위해서이다.
		- 특히 UI 프로그래밍에서 이벤트를 처리할 목적으로 많이 활용된다.
		----------------------------------------------------------
			class A {
				// 중첩 인터페이스
				interface I {
					void method();
				}
			}
		----------------------------------------------------------
		참고) nestedInterface.Button.java
			 nestedInterface.CallListener.java
			 nestedInterface.MessageListener.java
			 nestedInterface.ButtonRuntime.java
			 
			 
	9.5 anonymous object
		- 익명 객체는 이름이 없는 객체를 말한다.
		- 단독으로 생성할 수 없고 클래스를 상속하거나 인터페이스를 구현해야만 생성할 수 있다.
		- 익명 객체는 필드의 초기값이나 로컬 변수의 초기값, 매개 변수의 매개값으로 주로 대입된다.
		- UI 이벤트 처리 객체나 스레드 객체를 간편하게 생성할 목적으로 익명 객체가 많이 활용된다.
		
	9.5.1 create anonymous extends object
		- 부모 타입으로 필드나 변수를 선언하고, 자식 객체를 초기값으로 대입할 경우
			부모 클래스를 상속한 자식 클래스 선언 -> new 연산자이용 자식 객체 생성 -> 필드나 로컬 변수에 대입
		- 자식 클래스가 재사용 되지 않고, 오로지 해당 필드와 변수의 초기값으로만 사용할 경우
		  익명 자식 객체를 생성해서 초기값으로 대입하는 것이 좋은 방법이다.
		----------------------------------------------------------
			부모클래스 [필드|변수] = new 부모클래스(매개값, ...) {
				// 필드
				// 메소드
			};
			
			부모클래스(매개값, ...) {} : 부모클래스를 상속해서 중괄호와 같이 자식클래스를 선언하라는 뜻
			new 연산자 : '부모클래스(매개값, ...) {}'으로 선언된 자식 클래스를 객체로 생성	
			- 중괄호 내부에 생성자를 선언할 수 없다.
		----------------------------------------------------------
		- 필드를 선언할 때 초기값으로 익명 자식 객체를 생성하여 대입
		----------------------------------------------------------
			class A {
				// A 클래스의 필드 선언
				Parent field = new Parent(){
					int childField;
					void childMethod() {}
					// Parent의 메소드를 오버라이딩
					@Override
					void parentMethod(){}
				};
			}
		----------------------------------------------------------
		- 메소드 내에서 로컬 변수를 선언할 때 초기값으로 익명 자식 객체를 생성해서 대입
		----------------------------------------------------------
			class A {
				void method() {
					// 로컬 변수 선언
					Parent localVar = new Parent() {
						int childField;
						void childMethod(){}
						// Parent의 메소드를 오버라이딩
						@Override
						void parentMethod(){}
					};
				}
			}
		----------------------------------------------------------
		- 메소드의 매개 변수가 부모 타입일 경우 메소드 호출 고드에서 익명 자식 객체를 생성해서 매개값으로 대입할 수도 있다.
		----------------------------------------------------------
			class A {
				void method1(Parent parent) { }
				
				void method2() {
					// method1() 호출
					method1(
						// method1()의 매개값으로 익명 자식 객체를 대입한다.
						new Parent() {
							int childField;
							void childMethod() { }
							@Override
							void parentMethod() { }
						}
					};
				}
			}
		----------------------------------------------------------
		- 익명 자식 객체에 새롭게 정의된 필드와 메소드는 익명 자식 객체 내부에서만 사용되고, 외부에서는 필드와 메소드에
		  접근할 수 없다. ( 익명 자식 객체는 부모 타입 변수에 대입되므로 부모 타입에 선언된 것만 사용할 수 있기 때문)
		----------------------------------------------------------
			class A {
				Parent field = new Parent() {
					int childField;
					void childMethod() { }
					@Override
					void parentMethod() {
						childField = 3;
						childMethod();
					}
				};
				
				void method() {
					// 익명 자식 객체가 부모 타입 변수에 대입되므로 익명 자식 객체에 새롭게 정의된
					// 멤버는 접근하여 사용할 수 없다.
					//field.childField = 3;
					//field.childMethod();
					// 익명 자식 객체에 접근하여 사용할 수 있는 멤버는 부모 타입에 선언되어있는 멤버 뿐이다.
					field.parentMethod();
		----------------------------------------------------------
		참고) anonymousObjcet.inheritanceClass.Person.java
			 anonymousObjcet.inheritanceClass.Anonymous.java
			 anonymousObjcet.inheritanceClass.AnonymousRuntime.java
		
	9.5.2 create anonymous implement object
		- 인터페이스 타입으로 필드나 변수를 선언하고, 구현 객체를 초기값으로 대입하는 경우
			구현 클래스 선언 -> new 연산자 이용하여 구현 객체 생성 -> 필드나 로컬변수에 대입
		- 구현 클래스가 재사용되지 않고, 오로지 해당 필드와 변수의 초기값으로만 사용하는 경우라면
		  익명 구현 객체를 초기값으로 대입하는 것이 좋다.
		----------------------------------------------------------
			인터페이스 [필드|변수] = new 인터페이스() {
				// 인터페이스에 선언된 추상 메소드의 실체 메소드 선언
				// 필드
				// 메소드
			};
			
			인터페이스(){} : 인터페이스를 구현해서 중괄호{}와 같이 클래스를 선언하라는 뜻
			new 연산자 : 클래스를 객체로 생성
			- 중괄호{}에는 인터페이스에 선언된 모든 추상 메소드들의 실체 메소드를 작성해야 한다.
			- 추가적으로 필드와 메소드를 선언할 수 있지만, 실체 메소드에서만 사용이 가능하며 외부에서는 사용하지 못한다.
		----------------------------------------------------------
		- 필드를 선언할 때 초기값으로 익명 구현 객체를 생성해서 대입
		----------------------------------------------------------
			class A {
				// class A's field
				RemoteControl field = new RemoteControl {
					// RemoteControl 인터페이스의 추상 메소드에 대한 실체 메소드
					@Override
					void turnOn() { }
				};
			}
		----------------------------------------------------------
		- 메소드 내에서 로컬 변수를 언언할 때 초기값으로 익명 구현 객체를 생성해서 대입
		----------------------------------------------------------
			void method() {
				// 로컬 변수 선언
				RemoteControl localVar = new RemoteControl() {
					@Override
					void turnOn() { }
				};
			}
		----------------------------------------------------------
		- 메소드의 매개 변수가 인터페이스 타입일 경우, 메소드 호출 코드에서 익명 구현 객체를 생성해서
		  매개값으로 대입
		----------------------------------------------------------
			class A {
				void method1(RemoteControl rc) { }
				
				void method2() {
					// method1() 메소드 호출
					method1(
						// method1()의 매개값으로 익명 구현 객체를 대입
						new RemoteControl() {
							@Override
							void turnOn() { }
						}
					);
				}
			}
		----------------------------------------------------------
		참고) anonymousObjcet.inheritanceInterface.RemoteControl.java
			 anonymousObjcet.inheritanceInterface.Anonymous.java
			 anonymousObjcet.inheritanceInterface.AnonumousRuntime.java
		
		- UI 프로그램에서 흔히 사용되는 버튼의 클릭 이벤트 처리를 익명 구현 객체를 이용해서 처리하는 방법
		참고) anonymousObjcet.inheritanceInterface.Button.java
			 anonymousObjcet.inheritanceInterface.Window.java
			 anonymousObjcet.inheritanceInterface.Main.java
						
		
		
		
	
	