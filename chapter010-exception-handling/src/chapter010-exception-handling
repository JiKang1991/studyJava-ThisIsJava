	chapter010 exception-handling
	
	-- Table of contents --
		10.1 exception and exception class
		10.2 runtime exception
		10.3 code of exception handling
		10.4 handling code in accordance with type of exception
		10.5 auto closeable resource
		10.6 throws exception
		10.7 user definition exception and occurrence of exception
		10.8 to get exception information
	-----------------------
	
	10.1 exception and exception class
		* 에러(error) : 컴퓨터 하드웨어의 오동작 도는 고장으로 인해 응용프로그램 실행 오류가 발생하는 것
					 : JVM 실행에 문제가 생겼다는 의미이므로 JVM 위에서 실행되는 프로그램을 아무리 견고하게
					   만들어도 결국 실행 불능이 된다.
					 : 개발자는 이러한 에러에 대처할 방법이 전혀 없다.
		* 예외(exception) : 사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인해 발생하는 프로그램 오류를 말한다.
						 : 예외가 발생되면 프로그램은 곧바로 종료된다는 점에서는 에러와 동일하다.
						 : 예외 처리(Exception Handling)를 통해 프로그램을 종료하지 않고 정상 실행 상태가
						   유지 되도록 할 수 있다.
		* 일반 예외(컴파일러 체크 예외) : 자바 소스를 컴파일 하는 과정에서 예외 처리 코드가 필요한지 검사하고
									만약 예외 처리 코드가 없다면 컴파일 오류가 발생한다.
		* 실행 예외 : 컴파일 하는 과정에서 예외 처리 코드를 검사하지 않는 예외를 말한다.
		- 컴파일 시 예외 처리를 확인하는 차이일 뿐 일반예외와 실행예외 모두 예외 처리가 필요하다.
		- 자바에서는 예외를 클래스로 관리한다.
		- JVM은 프로그램을 실행하는 도중에 예외가 발생하면 해당 예외 클래스로 객체를 생성한다.
		  그리고 나서 예외 처리 코드에서 예외 객체를 이용할 수 있도록 한다.
		- 모든 예외 클래스들은 'java.lang.Exception' 클래스를 상속 받는다.
		- 일반 예외 클래스들은 Exception클래스를 상속 받지만 RuntimeException 클래스를 상속받지는 않는다.
		- 실행 예외 클래스들은 RuntimeException 클래스를 상속 받는다.
		
		
	10.2 runtime exception
		- 실행 예외는 자바 컴파일러가 체크를 하지 않기 때문에 오로지 개발자의 경험에 의해서 예외 처리 코드를 삽입해야 한다.
		- 예외 처리 코드를 넣지 않았을 경우, 해당 예외가 발생하면 프로그램은 곧바로 종료된다.
		
	10.2.1 NullPointerException
		- 가장 빈번한 실행 예외 'java.lang.NullPointerException'
		- 객체 참조가 없는 상태, 즉 null 값을 갖는 참조 변수로 객체 접근 연산자인 도트(.)를 사용했을 때 발생한다.
		참고) runtimeException.NullPointerExceptionExample.java
		
	10.2.2 ArrayIndexOutOfBoundException
		- 배열에서 인덱스 범위를 초과하여 사용할 경우 'java.lang.ArrayIndexOutOfBoundException'이 발생한다.
		참고) runtimeException.ArrayIndexOutOfBoundExceptionExample.java
		
	10.2.3 NumebrFormatException
		- 프로그램을 개발하다 보면 문자열로 되어있는 데이터를 숫자로 변경하는 경우가 자주 발생한다.
			ex) Integer.parseInt(String s) - 주어진 문자열을 정수로 변환해서 리턴
				Double.parseDouble(String s) - 주어진 문자열을 실수로 변환해서 리턴
				- Integer와 Double은 포장(Wrapper) 클래스라고 한다.
		- parseXXX() 메소드들의 매개값인 문자열에 숫자로 변환할 수 없는 문자가 포함되어 있다면
		  'java.lang.NumberFormatException'을 발생시킨다.
		참고) runtimeException.NumberFormatExceptionExample.java 
		
	10.2.4 ClassCastexception
		- 타입 변환(Casting)은 상위 클래스와 하위 클래스 간에 발생하고 구현 클래스와 인터페이스간에도 발생한다.
		- 이러한 관계가 아니라면 클래스는 다른 클래스로 타입 변환할 수 없다.
		- 억지로 타입 변환을 시도할 경우 ClassCastException이 발생한다.
		- ClassCastException을 발생시키지 않으려면 타입 변환 전에 타입 변환이 가능한지 'instanceof' 연산자로
		  확인하는 것을 권장한다.
		- instanceof 연산의 결과가 true이면 조항 객체를 우항 타입으로 변환이 가능하다는 뜻이다.
		참고) runtimeException.ClassCastexceptionExample.java
		
	
	10.3 code of exception handling
		- 프로그램에서 예외가 발생했을 경우 프로그램의 갑작스러운 종료를 막고, 정상 실행을 유지할 수 있도록
		  처리하는 코드를 예외 처리 코드라고 한다.
		- 자바 컴파일러는 소스 파일을 컴파일할 때 일반 예외가 발생할 가능성이 있는 코드를 발견하면,
		  컴파일 오류를 발생시켜 개발자로 하여금 강제적으로 예외 차리 코드를 작성하도록 요구한다.
		- 그러나 실행 예외는 컴파일러가 체크해주지 않기 때문에 예외 처리 코드를 개발자의 경험을 바탕으로 작성해야 한다.
		- 예외 처리 코드는 'try-catch-finally' 블록을 이용한다.
		- 'try-catch-finally' 블록은 생성자 내부와 메소드 내부에서 작성되어 일반 예외와 실행 예외가 발생할 경우
		  예외 처리를 할 수 있도록 해준다.
		- try 블록에는 예외 발생 가능 코드가 위치한다.
		- try 블록의 코드가 예외 발생 없이 정상 실행되면 catch 블록의 코드는 실행되지 않고 finally 블록의 코드를 실행한다.
		- 만약 try 블록의 코드에서 예외가 발생하면 즉시 실행을 멈추고 catch 블록으로 이동하여 예외 처리 코드를 실행한다.
		  그리고 finally 블록의 코드를 실행한다.
		- finally 블록은 옵션으로 생략 가능하다. 예외 발생 여부와 상관 없이 항상 실행할 내용이 있을 경우에만
		  finally 블록을 작성하면 된다.
		- try 블록과 catch 블록에서 return 문을 사용하더라도 finally 블록은 항상 실행된다.
		- 이클립스는 일반 예외가 발생할 가능성이 있는 코드를 작성하면 빨간 밑줄을 그어 예외 처리 코드의 필요성을 알려준다.
		  (빨간 밑줄에 마우슬르 가져다 놓으면 Unhandled exception(처리되지 않은 예외) 정보를 알 수 있다.)
		- 'Class.forName()' 메소드는 매개값으로 주어진 클래스가 존재하면 Class 객체를 리턴하지만,
		  존재하지 않으면 ClassNotFoundException 예외를 발생시킨다.
		참고) codeOfHandlingException.TryCatchFinallyExample.java
		- 실행 예외는 컴파일러가 예외 처리 코들르 체크하지 않기 때문에 이클립스에서도 빨간 밑줄이 생기지 않는다.
		참고) codeOfHandlingException.TryCatchFinallyRuntimeExceptionExample.java
		
		
	10.4 handling code in accordance with type of exception
	10.4.1 multiple catch
		- try 블록 내부는 다양한 종류의 예외가 발생할 수 있다.
		- 발생 되는 예외 별로 예외 처리 코드를 다르게 하려면 다중 catch 블록을 작성해야 한다.
		- catch 블록의 예외 클래스 타입은 try 블록에서 발생된 예외의 종류를 말한다.
		- try 블록에서 해당 타입의 예외가 발생하면 catch 블록을 실행하도록 되어있다.
		참고) multipleCatch.CatchByExceptionKindExample.java
		
	10.4.2 order of catch
		- 다중 catch 블록을 작성할 때 주의할 점은 상위 예외 클래스가 하위 예외 클래스보다 아래쪽에 위치해야 한다는 점이다.
		- try 블록에서 예외가 발생했을 때, 예외를 처리해줄 catch 블록은 위에서부타 차례대로 검색된다.
		- 상위 예외 클래스의 catch 블록이 위에 있다면, 하위 예외 클래스의 catch 블록은 실행되지 않는다.
		참고) multipleCatch.CatchOrderExample.java
		
	10.4.3 multi catch
		- 자바 7부터 하나의 catch 블록에서 여러개의 예외를 처리할 수 있도록 multi catch 기능을 추가했다.
		참고) multipleCatch.MultiCatchExample.java
	
	
	10.5 auto closeable resource
		- 자바 7에서 새로 추가된 try-catch-resources를 사용하면 예외 발생 여부와 상관 없이 사용했던
		  리소스 객체(각종 입출력 스트림, 서버 소켓, 소켓, 각종 채널)의 close() 메소드를 호출해서 안전하게
		  리소스를 닫아준다.
		* resource : 데이터를 읽고 쓰는 객체  ex) FileInputStream 객체, FileOutputStream 객체
		----------------------------------------------------------
			- 자바 6이전 까지 사용하던 코드
			FileInputStream fis = null;
			try {
				fis = new FileInputStream("file.txt");
				...
			} catch (IOException e) {
				...
			} finally {
				if(fis != null){
					try {
						fis.close();
					} catch (IOException e) {
					
					}
				}
			}	
			
			- 자바 7이후 코드
			try(FileInputStream fis = new FileInputSteam("file.txt")){
				...
			} catch(IOException e) {
				...
			}
		----------------------------------------------------------	
		- try 블록이 정상적으로 실행을 완료했거나 도중에 예외가 발생하게 되면 자동으로 fileInputStream의
		  close() 메소드가 호출된다. try{}에서 예외가 발생하면 우선 close()로 리소스를 닫고 catch 블록을 실행한다.
		- 복수개의 리소스를 사용한다면 다음과 같이 작성할 수 있다.
		----------------------------------------------------------
			try(
				FileInputSteam fis = new FileInputStream("file1.txt");
				FileOutputStream fos = new FileOutputStream("file2.txt")
			) {
				...
			} catch (IOException e) {
				...
			}
		----------------------------------------------------------
		- try-with-resource를 사용하기 위해서는 리소스 객체가 'java.lang.AutoCloseable' 인터페이스를
		  구현하고 있어야 한다.
		- AutoCloseable에는 close() 메소드가 정의되어있다.
		- try-with-resource는 close() 메소드를 자동 호출한다.
		- API 도큐먼트에서 AutoCloseable 인터페이스를 찾아 "All Known Implementing Classes:"를 보면
		  try-with-resource와 함께 사용할 수 있는 리소스에 대해 알 수 있다.
		참고) autoCloseableResource.FileInputStream.java	
			 autoCloseableResource.TryWithResourceExample.java
			 
			 
	10.6 throws exception
		- 메소드 내부에서 예외가 발생할 수 있는 코드를 작성할 때 try-catch 블록으로 예외를 처리하는 것이 기본이다.
		- 경우에 따라서는 메소드를 호출한 곳으로 예외를 떠넘길 수도 있다.
		- throws 키워드는 메소드 선언부 끝에 작성되어 메소드에서 처리하지 않은 예외를 호출한 곳으로 떠넘기는 역할을 한다.
		- throws 키워드 뒤에는 더넘길 예외 클래스를 쉼표로 구분해서 나열해주면 된다.
			ex) 리턴타입 메소드명(매개변수, ...) throws 예외클래스1, 예외클래스2, ... { }
		- 발생할 수 있는 예외의 종류별로 throws 뒤에 나열하는 것이 일반적이지만, throws Exception만으로 모든 예외를
		  간단히 떠 넘길 수도 있다.
		  	ex) 리턴타입 메소드명(매개변수, ...) throws Exception { }
		- throws 키워드가 붙어있는 메소드는 반드시 try 블록 내에서 호출되어야 한다.
		  그리고 catch 블록에서 떠넘겨 받은 예외를 처리해야 한다. 	
		----------------------------------------------------------
			// 메소드 실행 블록 내에서 ClassNotFoundException이 발생하면 메소드를 호출한 곳으로 예외를 넘긴다.
			public void method1() throws ClassNotFoundException {
				Class clazz = Class.forName("java.lang.String2");
			}
			
			public void method2() {
				try {
					method1();	// 메소드 호출
				} catch(ClassNotFoundException e)  
					// 예외 처리 코드
					System.out.println("클래스가 존재하지 않습니다.");
				}
			}
		----------------------------------------------------------
		- method2() 에서도 try-catch 블록으로 예외를 처리하지 않고 throws 키워드로 다시 예외를 떠넘길 수 있다.
		  그러면 method2()를 호출하는 곳에서 try-catch 블록을 사용해서 예외를 처리해야 한다.
		----------------------------------------------------------
			public void method2() throws ClassNotFoundException {
				method1();
			}
		----------------------------------------------------------
		- 자바 도큐먼트 API를 보면 클래스 생성자와 메소드 선언부에 throws 키워드가 붙어있는 것을 흔히 볼 수 있다.
		  이러한 생성자와 메소드를 사용하기위해서는 반드시 try-catch 블록으로 예외 처리를 하거나 throws를 다시 사용해서
		  예외를 호출한 곳으로 떠넘겨야 한다. 그렇지 않으면 컴파일 오류가 발생한다.
		참고) throwsException.ThrowsExample.java
		- main() 메소드에서도 throws 키워드를 사용해서 예외를 떠넘길 수 있는데, 이 경우 결국 JVM이 최종적으로
		  예외 처리를 하게 된다. JVM은 예외의 내용을 콘솔(Console)에 출력하는 것으로 예외 처리를 한다.
		----------------------------------------------------------
			public static void main(String[] args) thorws classnotfoundException {
				findClass();
			}
		----------------------------------------------------------
		- main() 메소드에서 throws Exception을 붙이는 것은 좋지 못한 예외 처리 방법이다.
		- main()에서 try-catch 블록으로 예외를 최종 처리하는 것이 바람직 하다.
 
	
	10.7 user definition exception and occurrence of exception
		- 프로그램을 개발핟 ㅏ보면 자바 표준 API에서 제공하는 예외 클래스만으로는 다양한 종류의 예외를 표현할 수가 없다.
		- 애플리케이션 서비스와 관련된 예외를 애플리케이션 예외(Application Exception)라고 하며,
		  이 애플리케이션 예외는 개발자가 직접 정의해서 만들어야 하므로 사용자 정의 예외라고도 한다.
		  
	10.7.1 	to define user definition exception
		- 사용자 정의 예외 클래스는 컴파일러가 체크하는 일반 예외로 선언할 수도 있고,
		  컴파일러가 체크하지 않는 실행 예외로 선언할 수도 있다.
		- 일반 예외로 선언할 경우 Exception을 상속하면 되고, 실행 예외로 선언할 경우에는 RuntimeException을 상속하면 된다.
		----------------------------------------------------------
			public class XXXException extends [ Exception | RuntimeException ] {
				public class XXXException() { }
				public class XXXException(String message) { super(message); }
			}
		----------------------------------------------------------
		- 사용자 정의 예외 클래스 이름은 Exception으로 끝나는 것이 좋다.
		- 사용자 정의 예외 클래스도 필드, 생성자, 메소드 선언들을 포함할 수 있지만 대부분 생성자 선언만을 포함한다.
		- 생성자는 두 개를 선언하는 것이 일반적이며, 하나는 매개 변수가 없는 기본 생성자이고,
		  다른 하나는 예외 발생 원인(예외 메시지)을 전달하기 위해 String 타입의 매개 변수를 같은 생성자이다.
		- String 타입의 매개 변수를 갖는 생성자는 상위 클래스의 생성자를 호출하여 예외 메시지를 넘겨준다.
		- 예외 메시지의 용도는 catch{} 블록의 예외 처리 코드에서 이용하기 위해서이다.
		참고) userDefinitionException.BalanceInsufficientException.java
		
	10.7.2 to occur Exception
		- 코드에서 예외를 발생시키는 방법은 throw와 new 키워드를 사용하는 것이다.
		----------------------------------------------------------
			throw new XXXException();
			throw new XXXException("메시지");
		----------------------------------------------------------
		- 예외 객체를 생성할 때는 기본 생성자 또는 예외 메시지를 갖는 생성자 중 어떤 것을 사용해도 된다.
		- 만약 catch 블록에서 예외 메시지가 필요하다면 예외 메시지를 갖는 생성자를 이용해야 한다.
		- 예외 발생 코들르 가지고 있는 메소드는 내부에서 try-catch 블록으로 예외를 처리할 수 있지만,
		  대부분은 자신을 호출한 곳에서 예외를 처리하도록 throws 키워드로 예외를 떠넘긴다.
		----------------------------------------------------------
			public void method() thorws XXXException {
				throw new XXXException("메시지");
			}
		----------------------------------------------------------
		- throws 키워드를 포함하고 있는 메소드는 호출한 곳에서 예외 처리를 해주어야 한다.
		----------------------------------------------------------
			try {
				method();
			} catch(XXXException e) {
				// 예외 처리
			}
		----------------------------------------------------------
		참고) userDefinitionException.Account.java
		
	
	10.8 to get exception information
		- try 블록에서 예외가 발생되면 예외 객체는 catch 블록의 매개 변수에서 참조하게 되므로 매개변수를 이용하면
		  예외 객체의 정보를 알 수 있다.
		- 모든 예외 객체는 Exception 클래스를 상속하기 때문에 Exception이 가지고 있는 메소드들을
		  모든 예외 객체에서 호출할 수 있다.
		- 예외를 발생시킬 때 String 타입의 메시지를 갖는 생성자를 이용하였다면,
		  메시지는 자동적으로 예외 객체 내부에 저장된다.
		  	ex) throw new XXXException("예외 메시지");
		- 예외 메시지의 내용에는 왜 예외가 발생했는지에 대한 간단한 설명이 포함된다.
		- 상세한 원인을 세분화하기 위해 예외 코드를 포함하기도 하는데, 예를 들어 데이터베이스에서 발생한 오류들은
		  예외 코드가 예외 메시지로 전달된다.
		- 이와 같은 예외 메시지는 catch 블록에서 getMessage() 메소드의 리턴값으로 얻을 수 있다.
		----------------------------------------------------------
			} catch(Exception e) {
				String message = e.getMessage();
			}
		----------------------------------------------------------
		* printStackTrace() : 예외 발생 코드를 추적해서 모두 콘솔에 출력한다. 어떤 예외가 어디에서 발생 했는지
							  상세하게 출력해주기 때문에 프로그램을 테스트하면서 오류를 찾을 때 활용된다. 
		----------------------------------------------------------
			try {
				// 예외 객체 생성
			} catch(예외클래스 e) {
				// 예외가 가지고 있는 Message 얻기
				String message = e.getMessage();
				
				// 예외의 발생 경로를 추적
				e.printStackTrace();
			}
		----------------------------------------------------------
		참고) getExceptionInformation.AccountExample.java