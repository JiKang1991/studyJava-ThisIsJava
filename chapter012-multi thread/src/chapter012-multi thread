	chapter012 multi thread
	
	-- Table of contents --
		12.1 about multi thread
		12.2 create and runtime of task thread
		12.3 priority of thread
		12.4 synchronized method and synchronized block
		12.5 state of thread
		12.6 control of thread state
		12.7 demon thread
		12.8 thread group
		12.9 thread pool		
	-----------------------
	
	12.1 about multi thread
	12.1.1 process and thread
		* process : 실행 중인 하나의 애플리케이션
				  : 애플리케이션이 실행되면 운영체제로부터 실행에 필요한 메모리를 할당받아 코드를 실행하는 것
		* 다중 프로세스 : 하나의 애플리케이션이 여러개 실행되는 것.
			ex) 크롬 브라우저를 두 개 실행한다면 두개의 크롬 브라우저 프로세스가 생성된것이다.
		* multi tasking
			: 두 가지 이상의 작업을 동시에 처리하는 것이다.
			: 운영체제는 멀티 태스킹을 위해 CPU 및 메모리 자원을 프로세스마다 적절히 할당하고 병렬로 실행시킨다.
		 	ex) 워드로 문서작업을 하면서 동시에 미디어 플레이어로 음악을 들을 수 있다.
		- 멀티 태스킹을 꼭 멀티 프로세스를 뜻하지는 않는다.
		  한 프로세스 내에서 멀티 태스킹을 할 수 있도록 만들어진 애플리케이션들도 있다.
		  ex) 동영상 재생과 음악 재생을 동시에 처리하거나 채팅 기능과 파일 전송 기능을 동시에 처리하는 것
		* thread : 코드 실행 흐름을 의미한다.
		* multi thread	: 애플리케이션 내부에서의 멀티 태스킹
		- 멀티 프로세스들은 운영체제에서 할당받은 자신의 메모리를 가지고 실행하기 때문에 서로 독립적이며,
		  하나의 프로세스에서 오류가 발생해도 다른 프로세스에 영향을 미치지 않는다.
		- 멀티 스레드는 하나의 프로세스 내부에 생성되기 때문에 하나의 스레드가 예외를 발생시키면
		  프로세스 자체가 종료될 수 있어 다른 스레드에게 영향을 미치게 된다.
		  (멀티 스레드에서는 예외 처리에 만전을 기해야 한다.)
		  
	12.1.2 main thread
		- 모든 자바 애플리케이션은 메인 스레드가 main()메소드를 실행하면서 시작된다.
		- 메인 스레드는 main() 메소드의 첫 코드부터 아래로 순차적으로 실행하고,
		  main() 메소드의 마지막 코드를 실행하거나 return문을 만나면 실행이 종료된다.
		- 메인 스레드는 필요에 따라 작업 스레드들을 만들어서 병렬로 코드를 실행할 수 있다.
		  즉, 멀티 스레드를 생성해서 멀티 태스킹을 수행한다.
		- 싱글 스레드 애플리케이션에서는 메인 스레드가 종료하면 프로세스도 종료된다.
		- 멀티 스레드 애플리케이션에서는 실행 중인 스레드가 하나라도 있다면, 프로세스는 종료되지 않는다.
		
		
	12.2 create and runtime of task thread
		- 자바에서는 작업 스레드도 객체로 생성되기 때문에 클래스가 필요하다.
		- java.lang.Thread 클래스를 직접 객체화하거나 Thread를 상속하는 하위 클래스를 만들서 생성할 수 있다.
		
	12.2.1 create by Thread class
		- Runnable을 매개값으로 갖는 Thread 클래스 생성자를 호출하면 java.lang.Thread 클래스로부터
		  작업 스레드 객체를 직접 생성할 수 있다. 
		  	ex) Thread thread = new thread(Runnable target);
		* Runnable
			: 작업 스레드가 실행할 수 있는 코드를 가지고 있는 객체이다.
			: 인터페이스 타입으로 구현 객체를 만들어 생성자에 대입해야 한다.
			: Runnable 인터페이스에는 run() 메소드가 정의되어있다. 구현 클래스는 run()을 재정의해서
			  작업 스레드가 실행할 코드를 작성해야 한다.
			----------------------------------------------------------
				class Task implements Runnable {
					public void run() {
						스레드가 실행할 코드;
					}
				}
			----------------------------------------------------------
		- Runnable은 작업 내용을 가지고 있는 객체이며 실제 스레드는 아니다.
		  Runnable 구현 객체를 생성한 후, 이것을 매개값으로 해서 Thread 생성자를 호출하면 작업스레드가 생성된다.
		----------------------------------------------------------
			Runnable task = new Task();
			Thread thread = new Thread(task);
		----------------------------------------------------------
		- Thread 생성자를 호출할 때 Runnable 익명 객체를 매개값으로 사용할 수 있다.
		----------------------------------------------------------
			Thread thread = new Thread(new Runnable() {
				public void run() {
					스레드가 실행할 코드;
				}
			});
		----------------------------------------------------------
		- Runnable 인터페이스는 run() 메소드 하나만 정의되어 있는 함수적 인터페이스이므로 람다식을 매개값으로
		  사용할 수도 있다.
		* 함수적 인터페이스 : 한 개의 메소드만 정의하고 있는 인터페이스 			
		----------------------------------------------------------
			Thread thread = new Thread(	()-> {
				스레드가 실행할 코드;
			} );
		----------------------------------------------------------
		- 작업스레드는 생성 즉시 실행되는 것이 아니라 start() 메소드를 호출해야만 실행된다.
			ex) thread.start();
		- start() 메소드가 호출되면, 작업 스레드는 매개값으로 받은 Runnable의 run() 메소드를 실행하면서
		  자신의 작업을 처리한다.
		참고) createThread.ByThreadClassBeepPrintExample1.java
			 createThread.ByThreadClassBeepTask.java
			 createThread.ByThreadClassBeepPrintExample2.java