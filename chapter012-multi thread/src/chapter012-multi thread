	chapter012 multi thread
	
	-- Table of contents --
		12.1 about multi thread
		12.2 create and runtime of task thread
		12.3 priority of thread
		12.4 synchronized method and synchronized block
		12.5 state of thread
		12.6 control of thread state
		12.7 demon thread
		12.8 thread group
		12.9 thread pool		
	-----------------------
	
	12.1 about multi thread
	12.1.1 process and thread
		* process : 실행 중인 하나의 애플리케이션
				  : 애플리케이션이 실행되면 운영체제로부터 실행에 필요한 메모리를 할당받아 코드를 실행하는 것
		* 다중 프로세스 : 하나의 애플리케이션이 여러개 실행되는 것.
			ex) 크롬 브라우저를 두 개 실행한다면 두개의 크롬 브라우저 프로세스가 생성된것이다.
		* multi tasking
			: 두 가지 이상의 작업을 동시에 처리하는 것이다.
			: 운영체제는 멀티 태스킹을 위해 CPU 및 메모리 자원을 프로세스마다 적절히 할당하고 병렬로 실행시킨다.
		 	ex) 워드로 문서작업을 하면서 동시에 미디어 플레이어로 음악을 들을 수 있다.
		- 멀티 태스킹을 꼭 멀티 프로세스를 뜻하지는 않는다.
		  한 프로세스 내에서 멀티 태스킹을 할 수 있도록 만들어진 애플리케이션들도 있다.
		  ex) 동영상 재생과 음악 재생을 동시에 처리하거나 채팅 기능과 파일 전송 기능을 동시에 처리하는 것
		* thread : 코드 실행 흐름을 의미한다.
		* multi thread	: 애플리케이션 내부에서의 멀티 태스킹
		- 멀티 프로세스들은 운영체제에서 할당받은 자신의 메모리를 가지고 실행하기 때문에 서로 독립적이며,
		  하나의 프로세스에서 오류가 발생해도 다른 프로세스에 영향을 미치지 않는다.
		- 멀티 스레드는 하나의 프로세스 내부에 생성되기 때문에 하나의 스레드가 예외를 발생시키면
		  프로세스 자체가 종료될 수 있어 다른 스레드에게 영향을 미치게 된다.
		  (멀티 스레드에서는 예외 처리에 만전을 기해야 한다.)
		  
	12.1.2 main thread
		- 모든 자바 애플리케이션은 메인 스레드가 main()메소드를 실행하면서 시작된다.
		- 메인 스레드는 main() 메소드의 첫 코드부터 아래로 순차적으로 실행하고,
		  main() 메소드의 마지막 코드를 실행하거나 return문을 만나면 실행이 종료된다.
		- 메인 스레드는 필요에 따라 작업 스레드들을 만들어서 병렬로 코드를 실행할 수 있다.
		  즉, 멀티 스레드를 생성해서 멀티 태스킹을 수행한다.
		- 싱글 스레드 애플리케이션에서는 메인 스레드가 종료하면 프로세스도 종료된다.
		- 멀티 스레드 애플리케이션에서는 실행 중인 스레드가 하나라도 있다면, 프로세스는 종료되지 않는다.
		
		
	12.2 create and runtime of task thread
		- 자바에서는 작업 스레드도 객체로 생성되기 때문에 클래스가 필요하다.
		- java.lang.Thread 클래스를 직접 객체화하거나 Thread를 상속하는 하위 클래스를 만들서 생성할 수 있다.
		
	12.2.1 create by Thread class
		- Runnable을 매개값으로 갖는 Thread 클래스 생성자를 호출하면 java.lang.Thread 클래스로부터
		  작업 스레드 객체를 직접 생성할 수 있다. 
		  	ex) Thread thread = new thread(Runnable target);
		* Runnable
			: 작업 스레드가 실행할 수 있는 코드를 가지고 있는 객체이다.
			: 인터페이스 타입으로 구현 객체를 만들어 생성자에 대입해야 한다.
			: Runnable 인터페이스에는 run() 메소드가 정의되어있다. 구현 클래스는 run()을 재정의해서
			  작업 스레드가 실행할 코드를 작성해야 한다.
			----------------------------------------------------------
				class Task implements Runnable {
					public void run() {
						스레드가 실행할 코드;
					}
				}
			----------------------------------------------------------
		- Runnable은 작업 내용을 가지고 있는 객체이며 실제 스레드는 아니다.
		  Runnable 구현 객체를 생성한 후, 이것을 매개값으로 해서 Thread 생성자를 호출하면 작업스레드가 생성된다.
		----------------------------------------------------------
			Runnable task = new Task();
			Thread thread = new Thread(task);
		----------------------------------------------------------
		- Thread 생성자를 호출할 때 Runnable 익명 객체를 매개값으로 사용할 수 있다.
		----------------------------------------------------------
			Thread thread = new Thread(new Runnable() {
				public void run() {
					스레드가 실행할 코드;
				}
			});
		----------------------------------------------------------
		- Runnable 인터페이스는 run() 메소드 하나만 정의되어 있는 함수적 인터페이스이므로 람다식을 매개값으로
		  사용할 수도 있다.
		* 함수적 인터페이스 : 한 개의 메소드만 정의하고 있는 인터페이스 			
		----------------------------------------------------------
			Thread thread = new Thread(	()-> {
				스레드가 실행할 코드;
			} );
		----------------------------------------------------------
		- 작업스레드는 생성 즉시 실행되는 것이 아니라 start() 메소드를 호출해야만 실행된다.
			ex) thread.start();
		- start() 메소드가 호출되면, 작업 스레드는 매개값으로 받은 Runnable의 run() 메소드를 실행하면서
		  자신의 작업을 처리한다.
		참고) createThread.ByThreadClassBeepPrintExample1.java
			 createThread.ByThreadClassBeepTask.java
			 createThread.ByThreadClassBeepPrintExample2.java
			 
	12.2.2 create by sub class of Thread
		- Thread의 하위 클래스로 작업 스레드를 정의하면서 작업 내용을 포함시킬 수 있다.
		- 하위 클래스는 Thread 클래스의 run() 메소드를 오버라이딩(재정의)하면 된다.
		- 작업 스레드 객체를 생성하는 방법은 일반적인 객체를 생성하는 방법과 동일하다.
		----------------------------------------------------------
			public class WorkerThread extends Thread {
				@Override
				public void run() {
					// 스레드가 실행할 코드
				}
			}
			Thread thread = new WorkerThread();
		----------------------------------------------------------
		- Thread 익명 객체로 작업 스레드 객체를 생성할 수도 있다.
		----------------------------------------------------------
			Thread thread = new Thread() {
				public void run() {
					// 스레드가 실행할 코드
				}
			};
		----------------------------------------------------------
		- 익명 객체로 생성된 스레드 객체에서 start() 메소드를 호출하면 작업 스레드는 자신의 run() 메소드를 실행한다.
			ex) thread.start()
		참고) createThread.BySubClassBeepThread.java
			 createThread.BySubClassBeepPrintExample3.java
			 
	12.2.3 name of thread
		- 스레드의 이름은 디버깅 시 어떤 스레드가 어떤 작업을 하는지 조사할 목적으로 가끔 사용된다.
		- 메인 스레드의 이름은 "main"이다.
		- 개발자가 직접 생성한 스레드는 자동적으로 "Thread-n"이라는 이름으로 설정되며 "n"은 스레드의 번호가 들어간다.
			ex) Thread-1, Thread-2, ...
		- setName() 메소드를 이용하여 임의의 이름을 부여할 수 있다.
			ex) thread.setName("스레드 이름");
		- getName() 메소드를 이용하여 스레드의 이름을 확인할 수 있다.
			ex) thread.getName();
		- setName(), getName()은 Thread의 인스턴스 메소드이므로 스레드 객체의 참조가 필요하다.
		- Thread의 정적 메소드인 currentThread()로 코드를 실행하는 현재 스레드의 참조를 얻을 수 있다.
			ex) Thread thread = Thread.currentThread();
		참고) createThread.ThreadNameExample.java
			 createThread.ThreadNameThreadA.java
			 createThread.ThreadNameThreadB.java
			 
	
	12.3 priority of thread
		- 멀티스레드는 동시성(Concurrency) 또는 병렬성(Parallelism)으로 실행된다.
		* concurrency(동시성) : 멀티 작업을 위해 하나의 코어에서 멀티 스레드가 번갈아 가며 실행하는 성질
		* parallelism(병렬성) : 멀티 작업을 위해 멀티 코어에서 개별 스레드를 동시에 실행하는 성질
		- 싱글 코어 CPU를 이용한 멀티 스레드 작업은 병렬적으로 실행되는 것 처럼 보이지만 동시성 작업이다.
		- 스레드 스케줄링에 의해 스레드들은 아주 짧은 시간에 번갈아 가면서 run() 메소드를 조금씩 실행한다.
		* 스레드 스케줄링 : 스레드의 개수가 코어의 수보다 많을 경우 스레드를 어떤 순서에 의해
						동시성으로 실행할 것인가를 결정하는 것
		- 자바의 스레드 스케줄링은 우선순위(priority) 방식과 순환 할당(round-robin) 방식을 사용한다.
		* priority 방식 : 우선순위가 높은 스레드가 실행 상태를 더 많이 가지도록 스케줄링 하는 것
					   : 스레드 객체에 우선 순위 번호를 부여하여 개발자가 코드로 제어할 수 있다.
					   : 우선 순위는 1 ~ 10까지 부여되며 1의 우선 순위가 가장 낮고, 10의 우선순위가 가장 높다.
					   : Thread 클래스가 제공하는 setPriority() 메소드로 우선순위를 변경할 수 있다.
					   		ex) thread.setPriority(우선순위);
					   : 우선순위의 매개값으로 1 ~ 10의 값을 직접 주어도 되지만, 코드의 가독성(이해도)을 위해
					     Thread 클래스의 상수를 사용할 수도 있다.
					     	ex) thread.setPriority(Thread.MAX_PRIORITY);
					     		thread.setPriority(Thread.NORM_PRIORITY);
					     		thread.setPriority(Thread.MIN_PRIORITY);
					   : MAX_PRIORITY = 10, NORM_PRIORITY = 5, MIN_PRIORITY = 1
					   : 할당된 코어의 수 보다 스레드의 수가 많을 때 우선순위 방식의 영향이 발생한다.
		* round-robin 방식 : 시간 할당량(Time Slice)을 정해서 하나의 스레드를 정해진 시간만큼 실행하고
							다시 다른 스레드를 실행하는 방식
						  : JVM에 의해서 정해지므로 코드로 제어할 수 없다.
		참고) priority.CalcThread.java
			 priority.Example.java
			 
			 
	12.4 synchronized method and synchronized block
	12.4.1 공유 객체를 사용할 때의 주의할 점
		- 싱글 스레드 프로그램에서는 한 개의 스레드가 객체를 독차지해서 사용하지만,
		  멀티 스레드 프로그램에서는 스레드들이 객체를 공유해서 작업해야 하는 경우가 있다.
		  이 경우 스레드 A가 사용하던 객체가 스레드 B에 의해 상태가 변경될 수 있기 때문에 
		  스레드 A가 의도했던 것과는 다른 결과를 산출할 수도 있다.
		참고) studySynchronized.CautionMainThreadExample.java
			 studySynchronized.CautionCalculator.java
			 studySynchronized.CautionUser1.java
			 studySynchronized.CautionUser2.java
			 
	12.4.2 synchronized method and synchronized block
		- 스레드가 사용중인 객체를 다른 스레드가 변경할 수 없도록 하려면
		  스레드 작업이 끝날 때까지 객체에 잠금을 걸어 다른 스레드가 사용할 수 없도록 해야한다.
		* 임계 영역(critical section) : 멀티 스레드 프로그램에서 단 하나의 스레드만 실행할 수 있는 코드 영역
		- 자바는 임계영역을 지정하기위해 동기화 메소드와 동기화 블록을 제공한다.
		- 스레드가 객체 내부의 동기화 메소드 또는 블록에 들어가면 즉시 객체에 잠금을 걸어 다른 스레드가
		  임계 영역 코드를 실행하지 못하도록 한다.
		- 메소드 선언에 synchronized 키워드를 붙여 동기화 메소드를 만들 수 있다.
		  synchronized 키워드는 인스턴스와 정정 메소드 어디든 붙일 수 있다.
		----------------------------------------------------------
			public synchronized void method(){
				임계 영역;		// 단 하나의 스레드만 실행
			}
		----------------------------------------------------------
		- 동기화 메소드는 메소드 전체 내용이 임계 영역이므로 스레드가 동기화 메소드를 실행하는 즉시
		  객체에는 잠금이 일어나고, 스레드가 동기화 메소드를 실행 종료하면 잠금이 풀린다.
		- 메소드 전체 내용이 아니라, 일부 내용만 임계 영역으로 설정할 수도 있다.
		----------------------------------------------------------
			public void method() {
				// 여러 스레드가 실행 가능 영역
				...
				synchronized(공유객체) {
					// 임계 영역, 단 하나의 스레드만 실행
				}
				// 여러 스레드가 실행 가능 영역
				...
			}
		----------------------------------------------------------
		- 동기화 블록의 외부 코드들은 여러 스레드가 동시에 실행할 수 있지만, 동기화 블록의 내부 코드는
		  임계 영역이므로 한 번에 한 스레드만 실행할 수 있고 다른 스레드는 실행할 수 없다.
		- 동기화 메소드와 동기화 블록이 여러개 있을 경우, 스레드가 이들 중 하나를 실행할 때 다른 스레드는
		  해당 메소드는 물론이고 다른 동기화 메소드 및 블록도 실행할 수 없다. 하지만 일반 메소드는 실행이 가능하다.
		참고) studySynchronized.CautionCalculatorModifiedVer.java
	
	
	12.5 state of thread
		- 스레드 객체를 생성하고, start() 메소드를 호출하면 스레드는 실행 대기 상태가 된다.
		* 실행 대기 상태 : 아직 스케줄링이 되지 않아서 기다리고 있는 상태
		* 실행 상태 : 실행 대기 상태에 있는 스레드 중에서 스레드 스케줄링으로 선택된 스레드가
					CPU를 점유하고 run() 메소드를 실행하는 상태
				  : run() 메소드를 완료 하기 전에 스레드 스케줄링에 의해 다시 실행 대기 상태로 돌아갈 수 있다.
				  : 실행 상태였던 스레드가 실행 대기 상태가 되면 실행 대기 상태였던 다른 스레드가 실행상태가 된다.
		- 스레드는 실행 대기 상태와 실행 상태를 번갈아가면서 run() 메소드를 조금씩 실행한다.
		* 종료 상태 : 실행 상태에서 run() 메소드가 종료된 상태( 더이상 실행할 코드가 없어 스레드의 실행이 멈춘 상태 )
		- 실행 상태에서 실행 대기 상태가 되지 않고 일시 정지 상태가 되는 경우도 있다.
		* 일시 정지 상태 : 스레드가 실행할 수 없는 상태
					  : 일시 정지 상태에는 WAITING, TIMED_WAITING, BLOCKED가 있다. 
		- 일시 정지 상태에서 실행 대기 상태가 되어야 이후 실행 상태가 될 수 있다.
		* getState() : 스레드의 상태를 코드에서 확인할 수 있는 메소드( 자바 5부터 추가 )
					 : 스레드 상태에 따라서 Thread.State 열거 상수를 리턴한다.
		----------------------------------------------------------
			상태		열거 상수			설명
			객체 생성	NEW				스레드 객체가 생성, 아직 start() 메소드가 호출되지 않은 상태
			실행 대기	RUNNABLE		실행 상태로 언제든지 갈 수 있는 상태
			일시 정지	WAITING			다른 스레드가 통지할 때까지 기다리는 상태
					TIMED_WAITING	주어진 시간 동안 기다리는 상태
					BLOCKED			사용하고자 하는 객체의 락이 풀릴 때까지 기다리는 상태
			종료		TERMINATED		실행을 마친 상태
		----------------------------------------------------------
		참고) threadState.CheckStatePrintThread.java
			 threadState.CheckTargetThread.java
			 threadState.CheckExample.java	