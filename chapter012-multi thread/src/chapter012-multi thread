	chapter012 multi thread
	
	-- Table of contents --
		12.1 about multi thread
		12.2 create and runtime of task thread
		12.3 priority of thread
		12.4 synchronized method and synchronized block
		12.5 state of thread
		12.6 control of thread state
		12.7 demon thread
		12.8 thread group
		12.9 thread pool		
	-----------------------
	
	12.1 about multi thread
	12.1.1 process and thread
		* process : 실행 중인 하나의 애플리케이션
				  : 애플리케이션이 실행되면 운영체제로부터 실행에 필요한 메모리를 할당받아 코드를 실행하는 것
		* 다중 프로세스 : 하나의 애플리케이션이 여러개 실행되는 것.
			ex) 크롬 브라우저를 두 개 실행한다면 두개의 크롬 브라우저 프로세스가 생성된것이다.
		* multi tasking
			: 두 가지 이상의 작업을 동시에 처리하는 것이다.
			: 운영체제는 멀티 태스킹을 위해 CPU 및 메모리 자원을 프로세스마다 적절히 할당하고 병렬로 실행시킨다.
		 	ex) 워드로 문서작업을 하면서 동시에 미디어 플레이어로 음악을 들을 수 있다.
		- 멀티 태스킹을 꼭 멀티 프로세스를 뜻하지는 않는다.
		  한 프로세스 내에서 멀티 태스킹을 할 수 있도록 만들어진 애플리케이션들도 있다.
		  ex) 동영상 재생과 음악 재생을 동시에 처리하거나 채팅 기능과 파일 전송 기능을 동시에 처리하는 것
		* thread : 코드 실행 흐름을 의미한다.
		* multi thread	: 애플리케이션 내부에서의 멀티 태스킹
		- 멀티 프로세스들은 운영체제에서 할당받은 자신의 메모리를 가지고 실행하기 때문에 서로 독립적이며,
		  하나의 프로세스에서 오류가 발생해도 다른 프로세스에 영향을 미치지 않는다.
		- 멀티 스레드는 하나의 프로세스 내부에 생성되기 때문에 하나의 스레드가 예외를 발생시키면
		  프로세스 자체가 종료될 수 있어 다른 스레드에게 영향을 미치게 된다.
		  (멀티 스레드에서는 예외 처리에 만전을 기해야 한다.)
		  
	12.1.2 main thread
		- 모든 자바 애플리케이션은 메인 스레드가 main()메소드를 실행하면서 시작된다.
		- 메인 스레드는 main() 메소드의 첫 코드부터 아래로 순차적으로 실행하고,
		  main() 메소드의 마지막 코드를 실행하거나 return문을 만나면 실행이 종료된다.
		- 메인 스레드는 필요에 따라 작업 스레드들을 만들어서 병렬로 코드를 실행할 수 있다.
		  즉, 멀티 스레드를 생성해서 멀티 태스킹을 수행한다.
		- 싱글 스레드 애플리케이션에서는 메인 스레드가 종료하면 프로세스도 종료된다.
		- 멀티 스레드 애플리케이션에서는 실행 중인 스레드가 하나라도 있다면, 프로세스는 종료되지 않는다.
		
		
	12.2 create and runtime of task thread
		- 자바에서는 작업 스레드도 객체로 생성되기 때문에 클래스가 필요하다.
		- java.lang.Thread 클래스를 직접 객체화하거나 Thread를 상속하는 하위 클래스를 만들서 생성할 수 있다.
		
	12.2.1 create by Thread class
		- Runnable을 매개값으로 갖는 Thread 클래스 생성자를 호출하면 java.lang.Thread 클래스로부터
		  작업 스레드 객체를 직접 생성할 수 있다. 
		  	ex) Thread thread = new thread(Runnable target);
		* Runnable
			: 작업 스레드가 실행할 수 있는 코드를 가지고 있는 객체이다.
			: 인터페이스 타입으로 구현 객체를 만들어 생성자에 대입해야 한다.
			: Runnable 인터페이스에는 run() 메소드가 정의되어있다. 구현 클래스는 run()을 재정의해서
			  작업 스레드가 실행할 코드를 작성해야 한다.
			----------------------------------------------------------
				class Task implements Runnable {
					public void run() {
						스레드가 실행할 코드;
					}
				}
			----------------------------------------------------------
		- Runnable은 작업 내용을 가지고 있는 객체이며 실제 스레드는 아니다.
		  Runnable 구현 객체를 생성한 후, 이것을 매개값으로 해서 Thread 생성자를 호출하면 작업스레드가 생성된다.
		----------------------------------------------------------
			Runnable task = new Task();
			Thread thread = new Thread(task);
		----------------------------------------------------------
		- Thread 생성자를 호출할 때 Runnable 익명 객체를 매개값으로 사용할 수 있다.
		----------------------------------------------------------
			Thread thread = new Thread(new Runnable() {
				public void run() {
					스레드가 실행할 코드;
				}
			});
		----------------------------------------------------------
		- Runnable 인터페이스는 run() 메소드 하나만 정의되어 있는 함수적 인터페이스이므로 람다식을 매개값으로
		  사용할 수도 있다.
		* 함수적 인터페이스 : 한 개의 메소드만 정의하고 있는 인터페이스 			
		----------------------------------------------------------
			Thread thread = new Thread(	()-> {
				스레드가 실행할 코드;
			} );
		----------------------------------------------------------
		- 작업스레드는 생성 즉시 실행되는 것이 아니라 start() 메소드를 호출해야만 실행된다.
			ex) thread.start();
		- start() 메소드가 호출되면, 작업 스레드는 매개값으로 받은 Runnable의 run() 메소드를 실행하면서
		  자신의 작업을 처리한다.
		참고) createThread.ByThreadClassBeepPrintExample1.java
			 createThread.ByThreadClassBeepTask.java
			 createThread.ByThreadClassBeepPrintExample2.java
			 
	12.2.2 create by sub class of Thread
		- Thread의 하위 클래스로 작업 스레드를 정의하면서 작업 내용을 포함시킬 수 있다.
		- 하위 클래스는 Thread 클래스의 run() 메소드를 오버라이딩(재정의)하면 된다.
		- 작업 스레드 객체를 생성하는 방법은 일반적인 객체를 생성하는 방법과 동일하다.
		----------------------------------------------------------
			public class WorkerThread extends Thread {
				@Override
				public void run() {
					// 스레드가 실행할 코드
				}
			}
			Thread thread = new WorkerThread();
		----------------------------------------------------------
		- Thread 익명 객체로 작업 스레드 객체를 생성할 수도 있다.
		----------------------------------------------------------
			Thread thread = new Thread() {
				public void run() {
					// 스레드가 실행할 코드
				}
			};
		----------------------------------------------------------
		- 익명 객체로 생성된 스레드 객체에서 start() 메소드를 호출하면 작업 스레드는 자신의 run() 메소드를 실행한다.
			ex) thread.start()
		참고) createThread.BySubClassBeepThread.java
			 createThread.BySubClassBeepPrintExample3.java
			 
	12.2.3 name of thread
		- 스레드의 이름은 디버깅 시 어떤 스레드가 어떤 작업을 하는지 조사할 목적으로 가끔 사용된다.
		- 메인 스레드의 이름은 "main"이다.
		- 개발자가 직접 생성한 스레드는 자동적으로 "Thread-n"이라는 이름으로 설정되며 "n"은 스레드의 번호가 들어간다.
			ex) Thread-1, Thread-2, ...
		- setName() 메소드를 이용하여 임의의 이름을 부여할 수 있다.
			ex) thread.setName("스레드 이름");
		- getName() 메소드를 이용하여 스레드의 이름을 확인할 수 있다.
			ex) thread.getName();
		- setName(), getName()은 Thread의 인스턴스 메소드이므로 스레드 객체의 참조가 필요하다.
		- Thread의 정적 메소드인 currentThread()로 코드를 실행하는 현재 스레드의 참조를 얻을 수 있다.
			ex) Thread thread = Thread.currentThread();
		참고) createThread.ThreadNameExample.java
			 createThread.ThreadNameThreadA.java
			 createThread.ThreadNameThreadB.java
			 
	
	12.3 priority of thread
		- 멀티스레드는 동시성(Concurrency) 또는 병렬성(Parallelism)으로 실행된다.
		* concurrency(동시성) : 멀티 작업을 위해 하나의 코어에서 멀티 스레드가 번갈아 가며 실행하는 성질
		* parallelism(병렬성) : 멀티 작업을 위해 멀티 코어에서 개별 스레드를 동시에 실행하는 성질
		- 싱글 코어 CPU를 이용한 멀티 스레드 작업은 병렬적으로 실행되는 것 처럼 보이지만 동시성 작업이다.
		- 스레드 스케줄링에 의해 스레드들은 아주 짧은 시간에 번갈아 가면서 run() 메소드를 조금씩 실행한다.
		* 스레드 스케줄링 : 스레드의 개수가 코어의 수보다 많을 경우 스레드를 어떤 순서에 의해
						동시성으로 실행할 것인가를 결정하는 것
		- 자바의 스레드 스케줄링은 우선순위(priority) 방식과 순환 할당(round-robin) 방식을 사용한다.
		* priority 방식 : 우선순위가 높은 스레드가 실행 상태를 더 많이 가지도록 스케줄링 하는 것
					   : 스레드 객체에 우선 순위 번호를 부여하여 개발자가 코드로 제어할 수 있다.
					   : 우선 순위는 1 ~ 10까지 부여되며 1의 우선 순위가 가장 낮고, 10의 우선순위가 가장 높다.
					   : Thread 클래스가 제공하는 setPriority() 메소드로 우선순위를 변경할 수 있다.
					   		ex) thread.setPriority(우선순위);
					   : 우선순위의 매개값으로 1 ~ 10의 값을 직접 주어도 되지만, 코드의 가독성(이해도)을 위해
					     Thread 클래스의 상수를 사용할 수도 있다.
					     	ex) thread.setPriority(Thread.MAX_PRIORITY);
					     		thread.setPriority(Thread.NORM_PRIORITY);
					     		thread.setPriority(Thread.MIN_PRIORITY);
					   : MAX_PRIORITY = 10, NORM_PRIORITY = 5, MIN_PRIORITY = 1
					   : 할당된 코어의 수 보다 스레드의 수가 많을 때 우선순위 방식의 영향이 발생한다.
		* round-robin 방식 : 시간 할당량(Time Slice)을 정해서 하나의 스레드를 정해진 시간만큼 실행하고
							다시 다른 스레드를 실행하는 방식
						  : JVM에 의해서 정해지므로 코드로 제어할 수 없다.
		참고) priority.CalcThread.java
			 priority.Example.java
			 
			 
	12.4 synchronized method and synchronized block
	12.4.1 공유 객체를 사용할 때의 주의할 점
		- 싱글 스레드 프로그램에서는 한 개의 스레드가 객체를 독차지해서 사용하지만,
		  멀티 스레드 프로그램에서는 스레드들이 객체를 공유해서 작업해야 하는 경우가 있다.
		  이 경우 스레드 A가 사용하던 객체가 스레드 B에 의해 상태가 변경될 수 있기 때문에 
		  스레드 A가 의도했던 것과는 다른 결과를 산출할 수도 있다.
		참고) studySynchronized.CautionMainThreadExample.java
			 studySynchronized.CautionCalculator.java
			 studySynchronized.CautionUser1.java
			 studySynchronized.CautionUser2.java
			 
	12.4.2 synchronized method and synchronized block
		- 스레드가 사용중인 객체를 다른 스레드가 변경할 수 없도록 하려면
		  스레드 작업이 끝날 때까지 객체에 잠금을 걸어 다른 스레드가 사용할 수 없도록 해야한다.
		* 임계 영역(critical section) : 멀티 스레드 프로그램에서 단 하나의 스레드만 실행할 수 있는 코드 영역
		- 자바는 임계영역을 지정하기위해 동기화 메소드와 동기화 블록을 제공한다.
		- 스레드가 객체 내부의 동기화 메소드 또는 블록에 들어가면 즉시 객체에 잠금을 걸어 다른 스레드가
		  임계 영역 코드를 실행하지 못하도록 한다.
		- 메소드 선언에 synchronized 키워드를 붙여 동기화 메소드를 만들 수 있다.
		  synchronized 키워드는 인스턴스와 정정 메소드 어디든 붙일 수 있다.
		----------------------------------------------------------
			public synchronized void method(){
				임계 영역;		// 단 하나의 스레드만 실행
			}
		----------------------------------------------------------
		- 동기화 메소드는 메소드 전체 내용이 임계 영역이므로 스레드가 동기화 메소드를 실행하는 즉시
		  객체에는 잠금이 일어나고, 스레드가 동기화 메소드를 실행 종료하면 잠금이 풀린다.
		- 메소드 전체 내용이 아니라, 일부 내용만 임계 영역으로 설정할 수도 있다.
		----------------------------------------------------------
			public void method() {
				// 여러 스레드가 실행 가능 영역
				...
				synchronized(공유객체) {
					// 임계 영역, 단 하나의 스레드만 실행
				}
				// 여러 스레드가 실행 가능 영역
				...
			}
		----------------------------------------------------------
		- 동기화 블록의 외부 코드들은 여러 스레드가 동시에 실행할 수 있지만, 동기화 블록의 내부 코드는
		  임계 영역이므로 한 번에 한 스레드만 실행할 수 있고 다른 스레드는 실행할 수 없다.
		- 동기화 메소드와 동기화 블록이 여러개 있을 경우, 스레드가 이들 중 하나를 실행할 때 다른 스레드는
		  해당 메소드는 물론이고 다른 동기화 메소드 및 블록도 실행할 수 없다. 하지만 일반 메소드는 실행이 가능하다.
		참고) studySynchronized.CautionCalculatorModifiedVer.java
	
	
	12.5 state of thread
		- 스레드 객체를 생성하고, start() 메소드를 호출하면 스레드는 실행 대기 상태가 된다.
		* 실행 대기 상태 : 아직 스케줄링이 되지 않아서 기다리고 있는 상태
		* 실행 상태 : 실행 대기 상태에 있는 스레드 중에서 스레드 스케줄링으로 선택된 스레드가
					CPU를 점유하고 run() 메소드를 실행하는 상태
				  : run() 메소드를 완료 하기 전에 스레드 스케줄링에 의해 다시 실행 대기 상태로 돌아갈 수 있다.
				  : 실행 상태였던 스레드가 실행 대기 상태가 되면 실행 대기 상태였던 다른 스레드가 실행상태가 된다.
		- 스레드는 실행 대기 상태와 실행 상태를 번갈아가면서 run() 메소드를 조금씩 실행한다.
		* 종료 상태 : 실행 상태에서 run() 메소드가 종료된 상태( 더이상 실행할 코드가 없어 스레드의 실행이 멈춘 상태 )
		- 실행 상태에서 실행 대기 상태가 되지 않고 일시 정지 상태가 되는 경우도 있다.
		* 일시 정지 상태 : 스레드가 실행할 수 없는 상태
					  : 일시 정지 상태에는 WAITING, TIMED_WAITING, BLOCKED가 있다. 
		- 일시 정지 상태에서 실행 대기 상태가 되어야 이후 실행 상태가 될 수 있다.
		* getState() : 스레드의 상태를 코드에서 확인할 수 있는 메소드( 자바 5부터 추가 )
					 : 스레드 상태에 따라서 Thread.State 열거 상수를 리턴한다.
		----------------------------------------------------------
			상태		열거 상수			설명
			객체 생성	NEW				스레드 객체가 생성, 아직 start() 메소드가 호출되지 않은 상태
			실행 대기	RUNNABLE		실행 상태로 언제든지 갈 수 있는 상태
			일시 정지	WAITING			다른 스레드가 통지할 때까지 기다리는 상태
					TIMED_WAITING	주어진 시간 동안 기다리는 상태
					BLOCKED			사용하고자 하는 객체의 락이 풀릴 때까지 기다리는 상태
			종료		TERMINATED		실행을 마친 상태
		----------------------------------------------------------
		참고) threadState.CheckStatePrintThread.java
			 threadState.CheckTargetThread.java
			 threadState.CheckExample.java	
			 
	
	12.6 control of thread state
		- 실행 중인 스레드의 상태를 변경하는 것을 스레드 상태 제어라고 한다.
		----------------------------------------------------------
			 메소드					설명
			 interrupt()			일시 정지 상태의 스레드에서 InterruptedException 예외를 발생시켜,
			 						예외 처리 코드(catch)에서 실행 대기 상태로 가거나 종료 상태로 갈 수 있도록한다.
			 
			 notify()				동기화 블록 내에서 wait() 메소드에 의해 일시 정지 상대에 있는 스레드를
			 notifyAll()			실행 대기 상태로 만든다.
			 
			 resume()				suspend() 메소드에 의해 일시 정지 상태에 있는 스레드를 실행 대기 상태로 만든다.
			 						- Deprecated( 대신 notify(), notifyAll() 사용 )
			 
			 sleep(long millis)		주어진 시간 동안 스레드를 일시 정지 상태로 만든다. 주어진 시간이 지나면 자동적으로
			 sleep(long millis,		실행 대기 상태가 된다.
			  int nanos)
			 
			 join()					join() 메소드를 호출한 스레드는 일시 정지 상태가 된다. 실행 대기 상태로 가려면,
			 join(long millis)		join() 메소드를 멤버로 가지는 스레드가 종료되거나, 매개값으로 주어진 시간이 지나야 한다.
			 join(long millis,
			  int nanos)
			  
			 wait()					동기화(synchronized) 블록 내에서 스레드를 일시 정지 상태로 만든다.
			 wait(long millis)		매개값으로 주어진 시간이 지나면 자동적으로 실행 대기 상태가 된다. 시간이 주어지지 않으면
			 wait(long millis,		notify(), notifyAll() 메소드에 의해 실행 대기 상태로 갈 수 있다.
			  int nanos)
			  
			 suspend()				스레드를 실시 정지 상태로 만든다. resume() 메소드를 호출하면 다시
			 						실행 대기 상태가 된다. - Deprecated( 대신 wait() 사용 )
			 
			 yield()				실행 중에 우선순위가 동일한 다른 스레드에게 실행을 양보하고 실행 대기 상태가 된다.
			 
			 stop()					스레드를 즉시 종료시킨다.	- Deprecated
		----------------------------------------------------------
		- wait(), notify(), notifyAll() 은 Object 클래스의 메소드이다.
		- 나머지 메소드는 모두 Thread 클래스의 메소드들이다.
		
	12.6.1 sleep() - 주어진 시간동안 일시 정지
		- Thread.sleep() 메소드를 호출한 스레드는 주어진 시간동안 일시정지 상태가 되고,
		  다시 실행 대기 상태로 돌아간다.
		----------------------------------------------------------
			try {
				Thread.sleep(1000);
			} else (Exception e) {
				// interrupt() 메소드가 호출되면 실행
			}
		----------------------------------------------------------
		- 매개값에는 얼마 동안 일시 정지 상태로 있을 것인지, 밀리세컨드(1/1000) 단위로 시잔을 주면 된다.
		- 1000이라는 값을 주면 스레드는 1초가 경과할 동안 일시 정지 상태로 있게 된다.
		- 일시 정지 상태에서 주어진 시간이 되기 전에 interrupt() 메소드가 호출되면 InterruptedException이
		  발생하기 때문에 예외 처리가 필요하다.
		참고) controlState.SleepExample.java
		
	12.6.2 yield() - 다른 스레드에게 실행 양보
		- 스레드가 처리하는 작업은 반복적인 실행을 위히 for문이나 while문을 포함하는 경우가 많다.
		- 가끔은 이 반복문들이 무의미한 반복을 하는 경우가 있다.
		----------------------------------------------------------
			public void run() {
				while(true) {
					if(work) {
						System.out.println("ThreadA 작업 내용");
					}
				}
			}
		----------------------------------------------------------
		- 스레드가 시작되어 run() 메소드를 실행하면 while(true) { } 블록을 무한 반복 실행한다.
		  만약 work의 값이 false라면 그리고 work의 값이 false에서 true로 변경되는 시점이 불명확하다면,
		  while문은 어떠한 실행문도 실행하지 않고 무의미한 반복을 한다.
		  이것보다는 다른 스레드에게 실행을 양보하고 자신은 실행 대기로 가는 것이 전체 프로그램 성능에 도움이 된다.
		* yield() : 메소드를 호출한 스레드는 실행 대개 상태로 돌아가고 동일한 우선순위 똔느 높은 우선순위를 갖는
					다른 스레드가 실행 기회를 가질 수 있도록 한다.
		----------------------------------------------------------
			public void run() {
				while(true) {
					if(work) {
						System.out.println("ThreadA 작업 내용");
					} else {
						Thread.yield();
					}
				}
			}
		----------------------------------------------------------
		참고) controlState.YieldExample.java
			 controlState.YieldThreadA.java
			 controlState.YieldThreadB.java
			 
	12.6.3 join() - 다른 스레드의 종료를 기다림
		- 스레드는 다른 스레드와 독립적으로 실행하는 것이 기본이지만 다른 스레드가 종료될 때까지 가다렸다가
		  실행해야 하는 경우가 발생할 수도 있다.
		- 예를 들어 A스레드에서 B스레드의 join() 메소드를 호출하면 B스레드가 종료될 때 까지 A스레드는 일시정지
		  상태가 된다.
		참고) controlState.JoinSumThread.java
			 controlState.JoinExample.java 	
			 
	12.6.4 wait(), notify(), notifyAll() - 스레드 간 협업
		- 경우에 따라서는 두 개의 스레드를 교대로 번갈아가며 실행해야 할 경우가 있다.
		- 정확한 교대 작업이 필요할 경우, 자신의 작업이 끝나면 상대방 스레드를 일시 정지 상태에서 풀어주고,
		  자신은 일시 정지 상태로 만드는 것이다.
		- 이 방법의 색심은 공유 객체에 있다. 공유 객체는 두 스레드가 작업할 내용을 각각 동기화 메소드로 구분해
		  놓는다. 한 스레드가 작업을 완료하면 notify() 메소드를 호출해서 일시 정지 상태에 있는 다른 스레드를
		  실행 대기 상태로 만들고, 자신은 두 번 작업을 하지 않도록 wait() 메소드를 호출하여 일지 정지 상태로 만든다.
		- wait() 대신 wait(long timeout)이나, wait(long timeout, int nanos)를 사용하면,
		  notify()를 호출하지 않아도 지정된 시간이 지나면 스레드가 자동적으로 실행 대기 상태가 된다.
		* notify() : wait()에 의해 일시 정지된 스레드 중 한 개를 실행 대기 상태로 만든다.
		* notifyAll() : wait()에 의해 일시 정지된 모든 스레드들을 실행 대기 상태로 만든다.
		- Object 클래스에 선언된 메소드이므로 모든 공유 객체에서 호출이 가능하다.
		- 동기화 메소드 또는 동기화 블록 내에서만 사용할 수 있다.
		참고1) controlState.WaitNotifyWorkObject.java
			  controlState.WaitNotifyThreadA.java
			  controlState.WaitNotifyThreadB.java
			  controlState.WaitNotifyExample1.java
			  
		참고2) controlState.WaitNotifyDataBox.java
			  controlState.WaitNotifyProducerThread.java
			  controlState.WaitNotifyCunsumerThread.java
			  controlState.WaitNotifyExample2.java
			  
	12.6.5 stop flag, interrupt() - 스레드의 안전한 종료
		- 실행 중인 스레드를 즉시 종료할 필요가 있을 때 Thread 클래스는 이를 위해서 stop() 메소드를 제공한다.
		  하지만, stop() 스레드로 스레드를 갑자기 종료하면 스레드가 사용중이던 자원(파일, 네트워크 연결 등)이
		  불안전한 생태로 남겨지기 때문에 stop() 메소드는 deprecated 되었다.
		
		1) to use stop flag
			- 스레드는 run() 메소드가 끝나면 자동적으로 종료되므로, run() 메소드가 정상적으로 종료되도록
			  유도하는 것이 최선의 방법이다.
			----------------------------------------------------------
				public class XXXThread extends Thread {
					// stop 플래그 필드
					private boolean stop;  
					
					public void run() {
						// stop이 ture가 되면 run()이 종료된다
						while( !stop ) {
							스레드가 반복 실행하는 코드;
						}
						// 스레드가 사용한 자원 정리
					}
				}
			----------------------------------------------------------
			참고) controlState.StopFlagExample.java
				 contorlState.StopFlagPrintThread1.java
				 
		2) interrupt() 메소드를 이용하는 방법
			- interrupt() 메소드는 스레드가 일시 정지 상태에 있을 때 InterruptedException 예외를 발생시키는
			  역할을 한다. 이것을 이용하면 run() 메소드를 정상 종료 시킬 수 있다.
			- interrupt() 메소드가 실행되면 즉시 InterruptedException 예외가 발생하지 않고,
			  스레드가 미래에 일시 정지 상태가 되면 InterruptedException 예외가 발생한다.
			- interrupt() 메소드가 호출 되면 스레드의 interrupted()와 isInterrupted() 메소드는
			  true를 리턴한다. 이를 통해 interrupt() 메소드 호출 여부를 확인할 수 있다.
			* interrupted() : 정적 메소드로 현재 스레드가 interrupted되었는지 확인하는 메소드
			* isInterrupted() : 인스턴스 메소드로 현재 스레드가 interrupted되었는지 확인하는 메소드
			참고) controlState.InterruptExample.java
				 controlState.InterruptPrintThread2.java
				 
	
	12.7 daemon thread
		* 데몬 스레드 : 주 스레드의 작업을 돕는 보조적인 역할을 수행하는 스레드 
		- 데몬 스레드는 주 스레드가 종료되면 강제적으로 자동 종료 된다.
		  주 스레드가 종료되면 데몬 스레드의 존재 이미가 없어지기 때문이다.
		- 데몬이 될 스레드의 setDaemon(true) 메소드를 주 스레드에서 호출하면 스레드를 데몬으로 만들 수 있다.
		----------------------------------------------------------
			public static void main(String[] args) {
				AutoSaveThread thread = new AutoSavethread();
				thread.setDaemon(true);
				thread.start();
				...
			}
		----------------------------------------------------------
		- start() 메소드가 호출되고 나서 setDaemon(true)를 호출하면 IllegalThreadStateException이
		  발생한다. start() 메소드 호출 전에 setDaemon(true)를 호출해야 한다.
		- isDaemon() 메소드는 현재 실행 중인 스레드가 데몬스레드일 경우 true를 리턴한다.
		참고) studyDaemonThread.AutoThread.java
			 studyDaemonThread.Example.java
		
			 
	12.8 thread group
		- 스레드 그룹은 관련된 스레드를 묶어서 관리할 목적으로 이용된다.
		  JVM이 실행되면 system 스레드 그룹을 만들고, JVM운영에 필요한 스레드들을 생성해서
		  system 스레드 그룹에 포함시킨다. system의 하위 스레드 그룹으로 main을 만들고
		  메인 스레드를 main 스레드 그룹에 포함시킨다.
		- 스레드는 반드시 하나의 스레드 그룹에 포함되는데, 명시적으로 스레드 그룹에 포함시키지 않으면
		  기본적으로 자신을 생성한 스레드와 같은 스레드 그룹에 속하게 된다. 
		  
	12.8.1 스레드 그룹 이름 얻기
		- 현재 스레드가 속한 스레드 그룹의 이름을 얻을 수 있다.
		---------------------------------------------------------- 
			ThreadGroup group = Thread.currentThread().getThreadGroup();
			String groupName = group.getName();
		----------------------------------------------------------
		- getAllStackTraces()는 Thread의 정적 메소드로 프로세스 내에서 실행하는 모든 스레드에 대한 정보를
		  얻을 수 있다. Map 타입의 객체를 리턴하며, 키는 스레드 객체이고 값은 스레드의 상태 기록들을 갖고있는
		  StackTraceElement[] 배열이다.
		  	ex) Map<Thread, StackTraceElement[]> map = Thread.getAllStackTrace();
		참고) studyThreadGroup.ThreadInfoExample.java
		
	12.8.2 스레드 그룹 생성
		- ThreadGroup(String name), ThreadGroup(ThreadGroup parent, String name) 생성자를 이용해서
		  명시적으로 스레드 그룹을 만들 수 있다. ThreadGroup 이름만 주거나, 부모 ThreadGroup과 이름을 매개값으로
		  줄 수 있다.
		----------------------------------------------------------
			ThreadGroup tg = new ThreadGroup(String name);
			ThreadGroup tg = new ThreadGroup(ThreadGroup parent, String name);
		----------------------------------------------------------
		- 부모(parent) 스레드 그룹을 지정하지 않으면 현재 스레드가 속한 그룹의 하위 그룹으로 생성된다.
		- Thread 객체를 생성할 때 생성자 매개값으로 스레드 그룹을 지정하면 새로운 스레드 그룹을 생성하여
		  새로운 스레드를 해당 그룹에 포함시킬 수 있다.
		----------------------------------------------------------
			Thread t = new Thread(ThreadGroup group, Runnable target);
			Thread t = new Thread(ThreadGroup group, Runnable target, String name);
			Thread t = new Thread(ThreadGroup group, Runnable target, String name, long stackSize);
			Thread t = new Thread(ThreadGroup group, String name);
		----------------------------------------------------------
		- Runnable 타입의 target은 Runnable 구현 객체를 의미한다.
		- String 타입의 name은 스레드의 이름이다.
		- long 타입의 stackSize는 JVM이 이 스레드에 할당할 stack 크기를 의미한다.
		
	12.8.3 스레드 그룹의 일괄 interrupt()
		- 스레드를 스레드 그룹에 포함시키면 스레드 그룹에서 제공하는 interrupt() 메소드를 이용하여 그룹 내에
		  포함된 모든 스레드들을 일괄 interrupt할 수 있다. 스레드 그룹의 interrupt() 메소드는 포함된
		  모든 스레드의 interrupt() 메소드를 내부적으로 호출하기 때문이다.
		- 스레드 그룹의 interrupt() 메소드는 소속된 스레드의 interrupt() 메소드를 호출만 할 뿐 개별 스레드에서
		  발생하는 InterruptedException에 대한 예외 처리를 하지 않는다 따라서 안전한 종료를 위해서는 개별 스레드가
		  예외 처리를 해야한다.
		- 스레드 그룹에는 interrupt() 메소드 이외에도 suspend(), resume(), stop() 메소드 들이 있는데 모두
		  Deprecated되었다. stop() 메소드를 호출하면 그룹에 포함된 모든 스레드들의 stop() 메소드가 일괄 호출되어
		  모든 스레드를 쉽게 종료할 수 있으나 스레드의 안전성 문제 때문에 가급적 사용하지 말아야 한다.
		----------------------------------------------------------
			메소드									설명
			int			activeCount()				현재 그룹 및 하위 그룹에서 활동 중인 모든 스레드의 수를 리턴한다.
			int			activeGroupCount()			현재 그룹에서 활동 중인 모든 하위 그룹의 수를 리턴한다.
			void		checkAccess()				현재 스레드가 스레드 그룹을 변경할 권한이 있는지 체크한다.
													만약 권한이 없으면 SecurityException을 발생시킨다.
			void		destroy()					현재 그룹 및 하위 그룹을 모두 삭제한다. 단, 그룹 내에 포함된 모든
													스레드들이 종료 상태가 되어야 한다.
			boolean		isDestroyed()				현재 그룹이 삭제되었는지 여부를 리턴한다.
			int			getMaxPriority()			현재 그룹에 포함된 스레드가 가질 수 있는 최대 우선순위를 리턴한다.
			void		setMaxPriority(int pri)		현재 그룹에 포함된 스레드가 가질 수 있는 최대 우선순위를 설정한다.
			String		getName()					현재 그룹의 이름을 리턴한다.
			ThreadGroup	getParent()					현재 그룹의 부모 그룹을 리턴한다.
			boolean		parentOf(ThreadGroup g)		현재 그룹이 매개값으로 지정한 스레드 그룹의 부모인지 여부를 리턴한다.
			boolean		isDaemon()					현재 그룹이 데몬 그룹인지 여부를 리턴한다.
			void		setDaemon(boolean daemon)	현재 그룹을 데몬 그룹으로 설정한다.
			void		list()						현재 그룹에 포함된 스레드와 하위 그룹에 대한 정보를 출력한다.
			void		interrupt()					현재 그룹에 포함된 모든 스레드들을 interrupt한다.
		----------------------------------------------------------
		참고) studyThreadGroup.GroupInterruptWorkThread.java
			 studyThreadGroup.GroupInterruptExample.java
	
	12.9 thread pool
		- 병렬 작업 처리가 많아지면 스레드 개수가 증가하고 그에 따른 스레드 생성과 스케줄링으로 인해
		  CPU가 바빠져 메모리 사용량이 늘어난다. 따라서 애플리케이션의 성능이 저하된다.
		- 갑작스런 병렬 작업의 폭증으로 인한 스레드의 폭증을 막으려면 스레드풀을 사용해야 한다.
		* 스레드풀 : 작업 처리에 사용되는 스레드를 제한된 개수만큼 정해놓고 작업 큐(Queue)에 들어오는 작업들을
		 		   하나씩 스레드가 맡아 처리할 수 있도록 하는 것
		- 작업 처리가 끝난 스레드다시 작업 큐에서 새로운 작업을 가져와 처리한다.
		  작업 처리 요청이 폭증되어도 스레드의 전체 개수가 늘어나지 않으므로
		  애플리케이션의 성능이 급격히 저하되지 않는다.
		- 자바는 스레드풀을 생성하고 사용할 수 있도록 java.util.concurrent 패키지에서
		  ExecutorService 인터페이스와 Executors 클래스를 제공하고 있다.
		  Executors의 다양한 정적 메소드를 이용해서 ExecutorService 구현객체를 만드는 것이 스레드풀이다.
		
	12.9.1 create and shutdown
		1) create
			- thread pool 즉 ExecutorService 구현 객체는 Executors 클래스의
			  newCachedThreadPool(), newFixedThreadPool(int nThreads) 메소드 중 하나를 이용해서
			  생성할 수 있다.
			----------------------------------------------------------
				메소드명(매개변수)						초기 스레드 수		코어 스레드 수		최대 스레드 수
				newCachedThreadPool()				0				0				Integer.MAX_VALUE
				newFixedThreadPool(int nThreads)	0				nThreads		nThreads
			----------------------------------------------------------
			* 초기 스레드 수 : ExecutorService 객체가 생성될 때 기본적으로 생성되는 스레드 수
			* 코어 스레드 수 : 스레드 수가 증가된 후 사용되지 않는 스레드를 스레드풀에서 제거할 때
							최소한 유지해야할 스레드 수
			* 최대 스레드 수 : 스레드 풀에서 관리하는 최대 스레드 수
			- newCachedThreadPool() 메소드로 생성된 스레드풀은 초기 스레드 개수와 코어 스레드 개수가 0개이고,
			  스레드 개수보다 작업 개수가 많으면 새 스레드를 생성시켜 작업을 처리한다.
			  1개 이상의 스레드가 추가되었을 경우 60초 동안 추가된 스레드가 아무 작업을 하지 않으면
			  추가된 스레드를 종료하고 풀에서 제거한다.
			- newFixedThredPool(int nThreads) 메소드로 생성된 스레드 풀의 초기 스레드 개수는 0개이고,
			  코어 스레드 수는 nThreads이다.
			  스레드 개수보다 작업 개수가 많으면 새 스레드를 생성시키고 작업을 처리한다.
			  최대 스레드 개수는 매개값으로 준 nThreads이다.
			  이 스레드풀은 스레드가 작업을 처리하지 않고 놀고 있더라도 스레드 개수가 줄지 않는다.
			----------------------------------------------------------
				CPU 코어의 수만큼 최대 스레드를 사용하는 스레드 풀 생성 코드
				ExecutorService executorService = Executors.newFixedThreadPool(
					Runtime.getRuntime().availableProcessors()
				);
			----------------------------------------------------------
			- newChachedThreadPool()과 newFixedThreadPool() 메소드를 사용하지 않고 코어 스레드 개수와
			  최대 스레드 개수를 설정하고자 한다면 직접 ThreadPoolExecutor 객체를 생성하면 된다.
			----------------------------------------------------------
				ExcutorService threadPool = new ThreadPoolExecutor(
					3,		// 코어 스레드 개수
					100,	// 최대 스레드 개수
					120L,	// 놀고 있는 시간
					TimeUnit.SECONDS, // 놀고 있는 시간 단위
					new SynchronousQueue<Runnable>() // 작업 큐
				);
			----------------------------------------------------------
		
		2) shutdown
			- 스레드 풀의 스레드는 main 스레드가 종료되더라도 작업을 처리하기 위해 계속 실행 상태로 남아있다.
			  그래서 main() 메소드의 실행이 끝나도 애플리케이션 프로세스는 종료되지 않는다.
			  애플리케이션을 종료하려면 스레드풀을 종료시켜 스레드들이 종료 상태가 되도록 처리해주어야 한다.
			----------------------------------------------------------
				리턴타입			메소드명(매개 변수)		설명
				void			shutdown()			현재 처리 중인 작업뿐만 아니라 작업 큐에 대기하고 있는
													모든 작업을 처리한 뒤에 스레드풀을 종료시킨다.
				List<Runnable>	shutdownNow()		현재 작업 처리 중인 스레드를 interrupt해서 작업 중지를
													시도하고 스레드풀을 종료시킨다. 리턴값은 작업 큐에 있는
													미처리된 작업(Runnable)의 목록이다.
				boolean			awaitTermination(	shutdown() 메소드 호출 이후, 모든 작업 처리를
								long timeout		timeout 시간 내에 완료하면 true를 리턴하고,
								TimeUnit unit)		완료하지 못하면 작업 처리중인 스레드를 interrupt하고
													false를 리턴한다.
			----------------------------------------------------------
			- 남아있는 작업을 마무리 하고 스레드풀을 종료할 때에는 shutdown()을 일반적으로 호출한다.
			- 남아있는 작업과는 상관없이 강제로 종료할 때에는 shutdownNow()를 호출한다.
				ex) executorService.shutdown(); / executorService.shutdownNow();
		
		12.9.2 작업 생성과 처리요청
			1) 작업 생성
				- 하나의 작업은 Runnable 또는 Callable 구현 클래스로 표현한다.
				- Runnable과 Callable의 차이점은 작업 처리 완료 후 리턴 값이 있느냐 없느냐이다.
				----------------------------------------------------------
					Runnable 구현 클래스
					Runnable task = new Runnable() {
						@Override
						public void run() {
							// 스레드가 처리할 작업 내용
						}
					}
					
					Callable 구현 클래스
					Callable<T> tsak = new Callable<T>() {
						@Override
						public T call() throws Exception {
							// 스레드가 처리할 작업 내용
							return T;
						}
					}
				----------------------------------------------------------
				- Runnable의 run() 메소드는 리턴값이 없고, Callable의 call() 메소드는 리턴값이 있다.
				- call()의 리턴 타입은 implements Callable<T>에서 지정한 T 타입이다.
				- 스레드풀의 스레드는 작업 큐에서 Runnable 또는 Callable 객체를 가져와
				  run()과 call() 메소드를 실행한다.
				  
			2) 작업 처리 요청
				- ExecutorService의 작업 큐에 Runnable 또는 Callable 객체를 넣는 행위를 말한다.
				----------------------------------------------------------
					리턴 타입		메소드명(매개변수)					설명
					void		execute(Runnable command)		- Runnable을 작업 큐에 저장
																- 작업 처리 결과를 받지 못함
					Future<?>	submit(Runnable task)			- Runnable 또는 Callable을 작업 큐에 저장
					Future<V>	submit(Runnable task, V result)	- 리턴된 Future를 통해 작업 처리 결과를 얻을 수 있음
					Future<V>	submit(Callable<V> task)
				----------------------------------------------------------
				- execute()는 작업 처리 결과를 받지 못하고 submit()은 작업 처리 결과를 받을 수 있도록 Future를 리턴한다.
				- execute()는 작업 처리 도중 예외가 발생하면 스레드가 종료되고 해당 스레드는 스레드 풀에서 제거된다.
				  따라서 스레드풀은 다른 작업 처리를 위해 새로운 스레드를 생성한다.
				  submit()은 작업 처리 도중 예외가 발생하더라도 스레드는 종료되지 않고 다음 작업을 위해 재사용된다.
				  가급적이면 스레드의 생성 오버헤더를 줄이기 위해서 submit()을 사용하는 것이 좋다.
				참고) studyThreadPool.ExecuteExample.java
		 	  	 