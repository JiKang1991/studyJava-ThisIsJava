	chapter008 interface
	
	-- Table of contents --
		8.1 role of interface
		8.2 declaration of interface
		8.3 implementation of interface
		8.4 use of interface
		8.5 type conversion and polymorphism
		8.6 inheritance of interface
		8.7 default method and expansion of interface
	-----------------------
	
	8.1 role of interface
		* interface : 객체의 사용 방법을 정의한 타입이다.
		- 인터페이스는 객체의 교환성을 높여주기 때문 구현한는 매우 중요한 역할을 한다.
		- 자바 8의 람다식은 함수적 인터페이스의 구현 객체를 생성하기 때문에,
		  인터페이스의 중요성이 더욱 커졌다.
		- 인터페이스는 개발 코드와 객체가 서로 통신하는 접접 역할을 한다.
		- 개발 코드가 인터페이스의 메소드를 호출하면 인터페이스는 객체의 메소드를 호출시킨다.
		- 이로 인해 개잘 코드는 객체의알 필요가 없고 인터페이스의 메소드만 알고 있으면 된다.
		----------------------------------------------------------
			
										  --메소드 호출-->
								  						객체 <---
					--메소드 호출-->		  <---리턴값1----		   |
			개발 코드				  인터페이스					   |교환(대체)		
					<--리턴값1or2--		  --메소드 호출-->		   |	
								  						객체 <---
										  <---리턴값2----
					
		----------------------------------------------------------
		- 개발 코드를 수정하지 않고, 사용하는 객체를 변경할 수 있도록 하기 위해서
		  개발 코드가 직접 객체의 메소드를 호출하지 않고 중간에 인터페이스를 두는 것이다.
		- 인터페이스는 하나의 객체가 아니라 여러 객체들과 사용이 가능하므로 어떤 객체를 사용하느냐에 따라서
		  실행 내용과 리턴값이 다를 수 있다.
		- 개발 코드 측면에선느 코드 변경 없이 실행 내용과 리턴값을 다양화 할 수 있다는 장점을 가진다.
	
		
	8.2 declaration of interface
		- 인터페이스는 '~.java' 형태의 소스 파일로 작성되고 컴파일러(javac.exe)를 통해 '~.class'형태로
		  컴파일 되기 때문에 물리적 형태는 클래스와 동일하다. 차이점은 소스를 작성할 때 선언하는 방법이 다르다.
	
	8.2.1 declaration of interface
		- 인터페이스 선언은 class 키워드 대신에 interface 키워드를 사용한다.
			ex) [ public ] interface 인터페이스명 { ... }
		- 인터페이스 이름은 영어 대소문자를 구분하며, 첫 문자를 대문자로 하고 나머지는 소문자로 작성하는 것이 관례이다.
		- 이클립스에서 인터페이스를 생성하려면 [Package Explorer 뷰 -> 인터페이스를 포함할 패키지 선택
		  -> 우클릭 메뉴에서 File -> New -> Interface]
		- 이클립스는 'public interface 인터페이스명 {}'과 같은 인터페이스의 선언부를 자동적으로 만들어준다.
		- 인터페이스는 상수와 메소드만을 구성 멤버로 가진다.
		- 인터페이스는 객체로 생성할 수 없기 때문에 생성자를 가질 수 없다.
		- 자바 7 이전까지는 인터페이스의 메소드는 실행 블록이 없는 추상 메소드로만 선언이 가능했지만,
		  자바 8 부터는 디폴트 메소드와 정적 메소드도 선언이 가능한다.
		----------------------------------------------------------
			interface 인터페이스명 {
				// 상수
				타입 상수명 = 값;
				
				// 추상 메소드
				타입 메소드명(매개변수, ...);
				
				// 디폴트 메소드
				default 타입 메소드명(매개변수, ...) {...}
				
				// 정적 메소드
				static 타입 메소드명(매개변수) {...}
			}
		----------------------------------------------------------
		1) 상수 필드(Constant Field)
			- 인터페이스는 객체 사용 설명서이므로 런타임 시 데이터를 저장할 수 있는 필드를 선언할 수 없다.
			- 하지만 상수 필드는 선언이 가능하다. 상수는 인터페이스에 고정된 값으로 런타임시에 데이터를 바꿀 수 없다.
			- 상수를 선언할 때는 반드시 초기값을 대입해야 한다.
		2) 추상 메소드(Abstract Method)
			- 추상 메소드는 객체가 가지고 있는 메소드를 설명한 것으로 호출할 때 어떤 매개값이 필요하고,
			  리턴 타입이 무엇인지만 알려준다.
			- 실제 실행부는 객체(구현 객체)가 가지고 있다.
		3) 디폴트 메소드(Default Method)
			- 디폴트 메소드는 인터페이스에 선언되지만 사실은 객체(구현 객체)가 가지고 있는 인스턴스 메소드라고 생각해야 한다.
			- 자바 8에서 디폴트 메소드를 허용한 이유는 기존 인터페이스를 확장해서 새로운 기능을 추가하기 위해서이다.
		4) 정적 메소드(Static Method)
			- 정적 메소드는 자바 8부터 작성할 수 있다.
			- 디폴트 메소드와는 달리 객체가 없어도 인터페이스만으로 호출이 가능한다.
			
	8.2.2 declaration of constant field
		- 인터페이스는 데이터를 저장할 수 없기 때문에 데이터를 저장할 인스턴스 또는 정적 필드를 선언할 수 없다.
		- 대신 상수 필드만 선언할 수 있다. 상수는 public static final로 선언하며 인터페이스에 선언된 필드는
		  모두 public static final의 특성을 갖는다.
		- public, static, final을 생략하더라도 자동적으로 컴파일 과정에서 붙게 된다.
			ex) [ public static final ] 타입 상수명 = 값;
		- 상수명은 대문자로 작성하되, 서로 다른 단어로 구성되어 있을 경우에는 언더바(_)로 연결하는 것이 관례이다.
		- 인터페이스 상수는 static{} 블록으로 초기화 할 수 없기 때문에 반드시 선언과 동시에 초기값을 지정해야 한다.
		----------------------------------------------------------
			public interface 인터페이스명 {
				public int MAX_VALUE = 10;
				public int MIN_VALUE = 0;
			}
		----------------------------------------------------------
		참고) declarationOfInterface.RemoteControl.java
		
	8.2.3 declaration of abstract method
		- 인터페이스를 통해 호출된 메소드는 최종적으로 객체에서 실행된다.
		- 인터페이스의 메소드는 실행 블록이 필요 없는 추상 메소드로 선언한다.
		- 추상 메소드는 리턴 타입, 메소드명, 매개 변숨나 기술되고 중괄호 {}를 붙이지 않는 메소드를 말한다.
		- 인터페이스에 선언된 추상 메소드는 모두 public abstract의 특성을 갖기 때문에 public abstract를
		  생략하더라도 자동적으로 컴파일 과정에서 붙게 된다.
		----------------------------------------------------------
		
				--메소드 호출-->		  --메소드 호출-->
		개발 코드				  인터페이스				    객체
				<--메소드 호출--	  	  <--메소드 호출--
							  추상메소드			 	재정의된 메소드
							(메소드 선언부)		   (실제 실행 메소드)
								 ||	   
			[public abstract] 리턴타입 메소드명(매개변수, ...);
		
		----------------------------------------------------------
		참고) declarationOfInterface.RemoteControl.java
		
	8.2.4 declaration of default method
		- 디폴트 메소드의 형태는 클래스 인스턴스 메소드와 동일한데, default 키워드가 리턴 타입 앞에 붙는다.
		- 디폴트 메소드는 public 특성을 갖기 때문에 public을 생략하더라도 자동적으로 컴파일 과정에서 붙게된다.
			ex) [public] default 리턴타입 메소드명(매개변수, ...) {...}
		참고) declarationOfInterface.RemoteControl.java
		
	8.2.5 declaration of static method
		- 정적 메소드의 형태는 클래스의 적적 메소드와 완전 동일하다.
		- 정적 메소드는 public 특성을 갖기 때문에 public을 생략하더라도 자동적으로 컴파일 과정에서 붙게 된다.
			ex) [public] static 리턴타입 메소드명(매개변수, ...) {...}
		참고) declarationOfInterface.RemoteControl.java
	
	
	8.3 implementation of interface
		- 개발 코드가 인터페이스 메소드를 호출하면 인터페이스는 객체의 메소드를 호출한다.
		* 구현(implement) 객체 : 인터페이스에서 정의된 추상 메소드와 메소드 이름, 매개 타입, 리턴 타입을 가진
		  실체 메소드를 가지고 있는 객체
		* 구현 클래스 : 구현 객체를 생성한는 클래스
	
	8.3.1 implement class
		- 구현 클래스는 보통의 클래스와 동일한데, 인터페이스 타입으로 사용할 수 있음을 알려주기 위해
		  클래스 선언부에 implements 키워드를 추가하고 인터페이스 명을 명시해야 한다.
		----------------------------------------------------------
			public class 구현클래스명 implements 인터페이스명 {
				// 인터페이스에 선언된 추상 메소드의 실체 메소드 선언
			}
		----------------------------------------------------------
		- 구현 클래스에는 인터페이스에 선언된 추상 메소드의 실체 메소드를 선언해야 한다.
		- 구현 클래스에서 인터페이스의 추상 메소드들에 대한 실체 메소드를 작성할 때 인터페이스의 모든 메소드는
		  기본적으로 public 접근 제한을 갖기 때문에 public보다 더 낮은 접근 제한으로 작성할 수 없다는 점에
		  주의해야 한다.
		- public을 생략하여 실체 메소드를 작성할 경우 'Cannot reduce the visibility of the inherited
		  method'라는 컴파일 에러가 발생한다.
		- 인터페이스에 선언된 추상 메소드에 대응하는 실체 메소드를 구현 클래스가 작성하지 않으면
		  구현 클래스는 자동적으로 추상 클래스가 된다. 그렇기 때문에 클래스 선언부에 abstract 키워드를 추가해야 한다.
		----------------------------------------------------------
			public abstract class Television implements RemoteControl {
				// setVolume() 실체 메소드를 구현하지 않았다.
				// turnOn(), turnOff() 실체 메소드만 구현
				public void turnOn() { ... }
				public void turnOff() { ... }
			}
		----------------------------------------------------------
		- 이클립스는 인터페이스의 추상 메소드에 대한 실체 메소드를 자동으로 생성해주는 기능을 제공한다.
		- 코드 창에서 인터페이스를 implements 선언한 후에 [ 메뉴 -> Source -> Override/Implement Methods..]를
		  선택하고 추상 메소드들을 체크한 후 ok 하면 된다.
		- 자동 생성된 메소드에는 '@Override'가 붙는다 이는 인터페이스의 추상 메소드에 대한 정확한 실체 메소드인지
		  컴파일러가 체크하도록 지시하는 어노테이션이다.
		- 인터페이스로 구현 객체를 사용하려면 인터페이스 변수를 선언하고 구현 객체를 대입해야 한다.
		참고) implementationOfInterface.Television.java
			 implementationOfInterface.Audio.java
			 implementationOfInterface.RemoteControlRuntime.java
			 
	8.3.2 anonymous implement object(익명 구현 객체)
		- 구현 클래스를 만들어 사용하는 것이 일반적이고, 클래스를 재사용할 수 있기 때문에 편리하지만,
		  일회성의 구현 객체를 만들기 위해 소스 파일을 만들고 클래스를 선언한느 것은 비효율적이다.
		* 익명 구현 객체 : 소스 파일을 만들지 않고도 구현 객체를 만들 수 있는 방법
		- 익명 구현 객체를 생성해서 인터페이스 변수에 대입하는 코드
		----------------------------------------------------------
			인터페이스 변수 = new 인터페이스() {
				// 인터페이스에 선언된 추상 메소드의 실체 메소드 선언
			}
		----------------------------------------------------------
		- new 연산자 뒤에 클래스 이름이 위치하지 않는다.
		- 인터페이스() {}는 인터페이스를 구현해서 중괄호 {}와 같이 클래스를 선언하라는 뜻이다.
		- new 연산자는 이렇게 선언된 클래스를 객체로 생성한다.
		- 중괄호{}에는 인터페이스에 선언된 모든 추상 메소드들의 실체 메소드를 작성해야 한다.
		  (모두 작성하지 않으면 컴파일 에러 발생)
		- 추가적으로 필드와 메소드를 선언할 수 있지만, 익명 객체 안에서만 사용할 수 있고,
		  인터페이스 변수로 접근할 수 없다.
		- 익명 구현 객체도 클래스를 바탕으로 생성된다.
		- RemoteControlRuntime.java를 컴파일하면 자바 컴파일러에 의해 'RemoteControlRuntime$1.class'가 만들어진다.
		- 익명 구현 객체를 구현하는 클래스의 이름 뒤에 $가 붙고 생성 번호가 붙는다. 생성번호는 1번 부터 시작한다.
			ex) 두 번째 익명 구현 객체의 이름은 RemoteControlRuntime$2.class 가 된다. 
		참고) anonymousImplementObject.RemoteControlRuntime.java
		
	8.3.3 multiple interfaces implement class(다중 인터페이스 구현 클래스)
		- 객체는 다수의 인터페이스 타입으로 사용할 수 있다.(다수의 인터페이스를 implements 한다)
		----------------------------------------------------------
			public class 구현클래스명 implements 인터페이스A, 인터페이스B {
				// 인터페이스A에 선언된 추상 메소드의 실체 메소드 선언
				// 인터페이스B에 선언된 추상 메소드의 실체 메소드 선언
			}
		----------------------------------------------------------
		- 다중 인터페이스를 구현할 경우, 구현 클래스는 모든 인터페이스의 추상 메소드에 대해 실체 메소드를 작성해야 한다.
		참고) multipleInterfaceImplementClass.Searchable.java
			 multipleinterfaceimplementClass.SmartTelevision.java
			 
	8.4 use of interface
		- 인터페이스로 구현 객체를 사용하려면 인터페이스 변수를 선언하고 구현 객체를 대입해야 한다.
		- 인터페이스 변수는 참조 타입이기 때문에 구현 객체가 대입될 경우 구현 객체의 번지를 저장한다.
		----------------------------------------------------------
			인터페이스 변수;
			변수 = 구현 객체;
			or
			인터페이스 변수 = 구현 객체;
		----------------------------------------------------------
		- 개발 코드에서 인터페이스는 클래스의 필드, 생성자 또는 메소드의 매개 변수,
		  생성자 또는 메소드의 로컬 변수로 선언될 수 있다.
		----------------------------------------------------------
			public class MyClass {
				// field
				RemoteControl rc = new Television();
				
				// constructor
				// 호출 : MyClass mc = new MyClass(new Television());
				MyClass(RemoteControl rc) {
					this.rc = rc;
				}
				
				// method
				void methodA() {
					// local variable
					Remotecontrol rc = new Audio();
				}
				
				// 호출 : mc.methodB(new Audio());
				void methodB(RemoteControl rc) { ... }
			}
		----------------------------------------------------------
	
	8.4.1 use of abstract method
		- 구현 객체가 인터페이스 타입에 대입되면 인터페이스에 선언된 추상 메소드를 개발 코드에서 호출할 수 있게 된다.
		----------------------------------------------------------
			RemoteControl rc = new Television();
			rc.turnOn();	->	Television의 turnOn() 실행
			rc.turnOff();	->	Television의 turnOff() 실행
		----------------------------------------------------------
		참고) useOfInterface.RemoteControlRuntime.java
		
	8.4.2 use of default method
		- 디폴트 메소드는 인터페이스에 선언되지만, 인터페이스에서 바로 사용할 수 없다.
		- 디폴트 메소드는 추상 메소드가 아닌 인스턴스 메서드이므로 구현 객체가 있어야 사용할 수 있다.
		- 디폴트 메소드는 인터페이스의 모든 구현 객체가 가지고 있는 기본 메소드라고 생각하면 된다.
		- 그러나 어떤 구현 객체는 디폴트 메소드의 내용이 맞지 않아 수정이 필요할 수도 있다.
		- 구현 클래스를 작성할 때 디폴트 메소드를 재정의(오버라이딩)해서 자신에게 맞게 수정하면 디폴트 메소드가
		  호출될 때 자신을 재정의한 메소드가 호출된다.
		참고) useOfInterface.RemoteControlRuntime.java
			 useOfInterface.Audio.java
		  
	8.4.3 use of static method
		- 인터페이스의 정적 메소드는 인터페이스로 바로 호출이 가능하다.
		참고) useOfInterface.RemoteControlRuntime.java
		
		
		
		 	
				