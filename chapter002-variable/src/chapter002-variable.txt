	chapter002 variable
	
	-- Table of contents --
		2.1 변수
		2.2 데이터 타입
		2.3 타입 변환
	-----------------------
	
	2.1 변수
	2.1.1 변수란?
		* 변수 : 하나의 값을 저장할 수 있는 메모리의 공간
		- 프로그램은 작업을 처리하는 과정에서 필요에 따라 데이터를 메모리에 저장할 때 변수를 사용한다.
		- 변수의 값은 프로그램에 의해서 수시로 값이 변동될 수 있다.
		- 하나의 값만 저장할 수 있다(복수개의 값을 저장 할 수 없다)
		- 한가지 타입의 값만 저장할 수 있다.
		
	2.1.2 변수의 선언
		- 변수를 사용하기 위해서는 먼저 변수를 선언해야 한다.
		* 변수 선언 : 데이터의 타입과 변수의 이름을 결정하는 것.
		----------------------------------------------------------
		타입		변수이름
		int		age;	// 정수(int)값을 저장할 수 있는 age 변수 선언
		double	value;	// 실수(double)값을 저장할 수 있는 value 변수 선언
		
		int x, y, z;	// 같은 타입의 변수는 콤마(,)를 이용해서 한꺼번에 선언할 수도 있다.
		----------------------------------------------------------
		* 타입 : 변수에 저장되는 값의 종류와 범위를 결정짓는 요소
		* 변수 이름 : 메모리 주소에 붙여진 이름, 프로그램은 변수 이름을 통해서 메모리 주소에 접근하고
					그것에 값을 저장하거나 그곳에 있는 값을 읽는다.
					자바 언어에서 정한 명명규칙(nameing convention)을 따라야한다.
					* 명명규칙
						(1) 첫 번째 글자는 문자이거나 '$', '_'이어야 하고 숫자로 싲가할 수 없다.
						(2) 영어 대소문자가 구분된다.
						(3) 첫 문자는 영어 소문자로 시작하되, 다른 단어가 붙을 경우 첫 문자를 대문자로 한다.
						(4) 문자 수(길이)의 제한은 없다.
						(5) 자바 예약어는 사용할 수 없다.
	
	2.1.3 변수의 사용
		* 변수의 사용 : 변수에 값을 저장하고 읽는 행위
		1) 변수값 저장
			- 대입 연산자(=)를 사용한다.
			* 대입 연산자 : 우측의 값을 좌측 변수에 저장한다는 의미를 갖는다.
			* 초기값 : 변수를 선언하고 처음 지정하는 값
			* 초기화 : 변수에 초기값을 주는 행위
			----------------------------------------------------------
			int score;	// 변수 선언
			score = 90;	// 값 저장
			
			int score = 90; // 선언과 동시에 초기값 부여도 가능하다.
			----------------------------------------------------------
			* 리터럴(literal)
				: 소스 코드 내에서 직접 입력된 값
				: 상수(constant)와 같은 의미지만, 프로그램에서는 상수를 "값을 한 번 저장하면 변경할 수 없는 변수"로 정의하기 때문에
				  이와 구분하기 위해 "리터럴"이라는 용어를 사용한다.
				- 정수 리터럴
					(1) 소수점이 없는 정수리터럴은 10진수로 간주한다. ex) 0, 75, -100
					(2) 0으로 시작되는 리터럴은 8진수로 간주한다. ex) 02, -04
					(3) 0x 또는 0X로 시작하고 0~9 숫자나 A, B, C, D, E, F 또는 a, b, c, d, e, f로 구성된 리터럴은 16진수로 간주한다.
						ex) 0x5, 0xA, 0xB3, 0xAC08
					- byte, char, short, int, long
				- 실수 리터럴
					(1) 소수점이 있는 리터럴은 10진수 실수로 간주한다. ex) 0.25, -3.14
					(2) 대문자 E또는 소문자 e가 있는 리터럴은 10진수 지수와 가수로 간주한다.	ex) 5E7, 0.12E-5
					- float, double
				- 문자 리터럴
					(1) 작은 따옴표(')로 묶은 텍스트는 하나의 문자 리터럴로 간주한다. ex) 'A', '한', '\t', '\n'
					(2) 역슬래쉬(\)가 붙은 문자 리터럴은 이스케이프(escape)문자라고도 하는데 특수한 용도로 사용된다.
					----------------------------------------------------------
					이스케이프 문자		용도						유니코드
					'\t'			수평 탭					0x0009
					'\n'			줄 바꿈					0x000a
					'\r'			리턴						0x000d
					'\"'			"(큰 따옴표)				0x0022
					'\''			'(작은 따옴표)				0x0027
					'\\'			\						0x005c
					'\u16진수'		16진수에 해당하는 유니코드	0x0000 ~ 0xffff
					----------------------------------------------------------
					- char
				- 문자열 리터럴
					- 큰 따옴표(")로 묶은 텍스트는 문자열 리터럴로 간주한다.
					- 큰 따옴표 안에는 텍스트가 없어도 문자열 리터럴로 간주된다.
					- 문자열 리터럴 내부에서도 이스케이프 문자를 사용할 수 있다.
					ex) "대한민국"	"탭 만큼 이동 \t 합니다."	"한 줄 내려 쓰기 \n 합니다."
					- String
				- 논리 리터럴
					- true, false
					- boolean
			
			2) 변수값 읽기
				- 변수는 초기화가 되어야 읽을 수 있다.
				----------------------------------------------------------
				int value;					// 변수 value 선언(초기화 안 됨)
				int result = value + 10;	// 변수 value 값을 읽고 10을 더한 결과값을 변수 result에 저장 (컴파일 에러 발생)
				
				int value;					// 변수 value가 30으로 초기화됨
				int result = value + 10;	// 변수 value 값을 읽고 10을 더한 결과값(40)을 변수 result에 저장 (ok)
				----------------------------------------------------------
				
	2.1.4 변수의 사용 범위
		- 변수는 중괄호 '{}' 블록 내에서 선언되고 사용된다.
		- 중괄호 블록을 사용하는 곳은 클래스, 생성자, 메소드이다.
		- 메소드 블록 내에서 선언된 변수를 특히 로컬 변수(local variable)라고 부른다
		- 로컬 변수는 메소드 실행이 끝나면 메모리에서 자동으로 없어진다.
		----------------------------------------------------------
		public class VariableExample { // 클래스 블록 시작
			public static void main(String[] args){ // 메소드 블록 시작
				// 변수(로컬 변수) 선언 및 초기값 저장
			} // 메소드 블록 끝
		} // 클래스 블록 끝
		----------------------------------------------------------
		- 변수는 선언된 블록 내에서만 사용이 가능하다.
		- 메소드 블록 내에서도 제어문(if(){}, for(){}, while(){} 등)이 중괄호를 가질 수 있다.
		- 제어문 블록 내에서 선언된 변순느 해당 제어문 블록 내에서만 사용이 가능하다.
		----------------------------------------------------------
		public static void main(String[] args){ // 메소드 블록 시작
			int var1;	// 메소드 블록에서 선언
			
			if(){ // if 조건문 블록 시작
				int var2;	// if 조건문 블록에서 선언
				// var1, var2 사용가능
			} // if 조건문 블록 끝
				
			for(){ // for 반복문 블록 시작
				int var3;	// for 반복문 블록에서 선언
				// var1, var3 사용가능
				// var2 사용 불가
			} // for 반복문 블록 끝
				
			// var1 사용가능
			// var2, var3 사용 불가
		} // 메소드 블록 끝
		----------------------------------------------------------		
	
			