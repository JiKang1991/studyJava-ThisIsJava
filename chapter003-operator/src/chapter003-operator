	chapter003 operator
	
	-- Table of contents --
		3.1 연산자와 연산식
		3.2 연산의 방향과 우선순위
		3.3 단항 연산자
		3.4	이항 연산자
		3.5	삼항	연산자
	-----------------------
	
	3.1 연산자와 연산식
		* 연산(operations) : 프로그램에서 데이터를 처리하여 결과를 산출하는 것
		* 연산자(operator) : 연산에 사용되는 표시나 기호이다. 단항, 이항, 삼항 연산자로 구분한다.
		* 피연산자(operand) : 연산되는 데이터
		* 연산식(expression)
			: 연산자와 피연산자를 이용하여 연산의 과정을 기술한 것이다.
			: 반드시 하나의 값을 산출한다.
			: 다른 연산자의 피연산자 위치에도 쓸 수 있다.
		----------------------------------------------------------
		연산자 종류	연산자			피연산자 수	산출값		기능 설명
		산술			+, -, *, /, %	이항			숫자			사칙연산 및 나머지 계산
		부호			+, -			단항			숫자			음수와 양수의 부호
		문자열		+				이항			문자열		두 문자열을 연결
		대입			=, +=, -=, *=,	이항			다양			우변의 값을 좌변의 변수에 대입
					/=, %=, &=, ^=,
					|=, <<=, >>=,
					>>>=			
		증감			++, --			단항			숫자			1만큼 증가/감소
		비교			==, !=, >, <,	이항			boolean		값의 비교
					>=, <=,
					instance of
		논리			!, &, |, &&, ||	단항/이항		boolean		논리적 NOT, AND, OR 연산
		조건			(조건식) ? A : B	삼항			다양			조건식에 따라 A 또는 B중 하나를 선택
		비트			~, &, |, ^		단항/이항		숫자/boolean	비트	NOT, AND, OR, XOR 연산
		쉬프트		>>, <<, >>>		이항			숫자			비트를 좌측/우측으로 밀어서 이동
		----------------------------------------------------------
	
	3.2 연산의 방향과 우선순위
		- 프로그램에서는 연산자의 연산 방향과 연산자 간의 우선순위가 정해져 있다.
		- 우선순위가 같은 연산자의 경우 대부분 왼쪽에서부터 오른쪽으로 연산을 시작한다.
		- 단항연산자(++, --, ~, !), 부호연산자(+, -), 대입연산자(=, +=, -=, ...)는 오른쪽에서 왼쪽으로 연산한다.
		----------------------------------------------------------
		연산자									연산 방향				우선순위
		증감(++, --), 부호(+, -), 비트(~), 논리(!)	<---------			1
		산술(*, /, %)							--------->			2
		산술(+, -)								--------->			3
		쉬프트(<<, >>, >>>)						--------->			4
		비교(<, >, <=, >=, instance of)			--------->			5
		비교(==, !=)								--------->			6
		논리(&)									--------->			7
		논리(^)									--------->			8
		논리(|)									--------->			9
		논리(&&)									--------->			10	
		논리(||)									--------->			11
		조건(? :)								--------->			12
		대입(=, +=, -=, *=, /=, %=, &=, ^=, |=,	<---------			13
			<<=, >>=, >>>=
		----------------------------------------------------------	
		(1) 단항, 이항(대입연산자 제외), 삼항, 대입(이항) 연산자 순으로 우선순위를 가진다.
		(2) 산술, 쉬프트, 비교, 논리, (조건), 대입 연산자 순으로 우선순위를 가진다.
		(3) 단항과 대입 연산자를 제외한 모든 연산의 방향은 왼쪽에서 오른쪽이다.
		(4) 복잡한 연산식에는 괄호()를 사용해서 우선순위를 정해준다.
	
	3.3 단항연산자
		- 피연산자가 하나뿐인 연산자, 부호(+, -), 증감(++, --), 비트 반전(~), 논리 부정(!)
	
	3.3.1 부호 연산자(+, -)
		- 양수 밒 음수를 표시하는 +, -
		- boolean 타입과 char 타입을 제외한 나머지 기본 타입에 사용할 수 있다.
		----------------------------------------------------------
		연산식				설명
		+		피연산자		피연산자의 부호 유지
		- 		피연산자		피연산자의 부호 변경
		----------------------------------------------------------
		- 정수 및 실수 리터럴 앞에 붙여 양수 및 음수를 표현한다.
		----------------------------------------------------------
		int i1 = +100;
		int i2 = -100;
		double d1 = +3.14;
		double d2 = -10.5;
		----------------------------------------------------------
		- 정수 및 실수 타입 변수 앞에 붙일 수 있다. 변수 값의 부호를 유지하거나 바꾸기 위해 사용된다.
		----------------------------------------------------------
		int x = -100;
		int result1 = +x;	// -100
		int result2 = -x;	// 100
		----------------------------------------------------------
		- 부호 연산자의 산출 타입은 int 타입이 된다. ex) short 타입 값을 부호 연산하면 int 타입 값으로 바뀐다.
		----------------------------------------------------------
		short s = 100;
		short result = -s;	// compile error 발생
		
		short s = 100;
		int result = -s;	// ok!
		----------------------------------------------------------
	
	3.3.2 증감연산자(++, --)
		- 변수의 값을 1 증가(++)시키거나 1 감소(--)시키는 연산자를 말한다.
		- boolean 타입을 제외한 모든 기본 타입의 피연산자에 사용할 수 있다.
		