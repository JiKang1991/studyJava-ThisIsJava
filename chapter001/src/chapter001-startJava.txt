	chapter001 startJava

	-- Table of contents --
		1.1 프로그래밍 언어란?
		1.2 자바란?
		1.3 자바 개발 환경 구축
		1.4 자바 프로그램 개발 순서
		1.5 주석과 실행문
		1.6 이클립스 설치
	-----------------------
	
	1.1 프로그래밍 언어란?
	
		1) 기계어(machine language)
	 		1-1) 컴퓨터가 이해할 수 있는 언어
	 		1-2) 0과 1로 이루어진 이진 코드, 사람이 이해하기 어렵다.
	 	
	 	2) 프로그래밍 언어
	 		2-1) 사람의 언어와 기계어의 다리역할을 하는 언어
	 		2-2) 고급 언어와 저급언어로 구분할 수 있다.
	 			(1) 고급 언어
	 				- 일반적으로 프로그래밍 언어라고 할 때 의미하는 것이다. ex) C, C++, Java
		 			- 프로그래밍 언어중에서 사람이 쉽게 이해할 수 있는 언어를 말한다.
		 			- 컴파일(compile) 과정을 통해서 기계어로 변환해야 한다.
	 				* 소스(source) : 고급 언어들로 작성된 내용
	 				* 컴파일러(compiler) : 소스를 기계어로 변환하는 소프트웨어
	 				* 프로그램(program) : 컴퓨터에서 특정 목적을 수행하기 위해 소스를 기계어로 번역한 것
	 			(2) 저급 언어
		 			- 기계어에 가까운 언어 ex) 어셈블리어
		 			- 사람이 쉽게 이해할 수 없기 때문에 배우기가 매우 까다롭다.
	 			
	 
	1.2 자바란?
	
	 	1.2.1 자바 소개
	 	
		1.2.2 자바의 특징
		 
			1) 이식성이 높은 언어이다.
				* 이식성 : 서로 다른 실행환경을 가진 시스템 간에 프로그램을 옮겨 실행할 수 있는 것
				- 일반적으로 하나의 실행환경에 최적화되어있는 프로그램을 다른 실행환경(OS)에서 실행하려면
				  프로그램 소스 파일을 수정하여 재컴파일 과정을 거쳐야한다. 
				- 자바 언어로 개발된 프로그램은 소스 파일을 다시 수정하지 않아도,
				  자바 실행 환경(JRE: Java Runtime Environment)이 설치되어 있는 모든 운영체제에서 실행 가능하다.
			
			2) 객체 지향 언어이다.
				* 객체 지향 언어 : 객체 지향 프로그래밍에 사용되는 언어
				* 객체 지향 프로그래밍(OOP: Object Oriented Programming)
					: 프로그램을 개발하는 하나의 기법으로 부품에 해당하는 객체들을 먼저 만들고, 이것들을 하나씩 조립 및 연결해서
					  전체 프로그램을 완성하는 기법이다.
		 		- 객체 지향 언어가 가져야 할 캡슐화, 상속, 다형성 기능을 완벽하게 지원하고 있다.
				
			3) 함수적 스타일 코딩을 지원한다.
				* 함수적 프로그래밍
					: 데이터를 변환하는 함수의 조합으로 구성되는 프로그램 작성 방법
					: 함수의 출력은 입력에 의해서만 정해지고, 함수를 실행하는 명령어를 내포한 구조로 연결하여 프로그램을 구현한다.
				- 함수적 스타일 코딩의 장점
					(1) 대용량 데이터의 병렬 처리에 적합하다.
					(2) 이벤트 지향 프로그래밍에 적합하다.
						* 이벤트 지향 프로그래밍
							: 특정 이벤트가 발생했을 때 해당 이벤트에 맞는 동작을 실행하게 하는 방향으로 프로그래밍하는 것
				- 자바 8부터 함수적 프로그래밍을 위해 람다식(Lambda Expressions)을 지원한다.
				  람다식을 사용하면 컬렉션(Collection)의 요소를 필터링, 매핑, 집계 처리하는데 쉬워지고 코드가 간결해진다.
					* 람다식
						: 익명 함수(anonymous function)를 생성하기 위한 식이다.
						: 객체 지향 언어보다는 함수 지향 언어에 가깝다.
						: 매개 변수를 가진 코드 블록의 형태를 가지지만 런타임 시에는 익명 구현 객체를 생성한다.
					* 컬렉션(Collection)
						: 프레임 워크(Framework) = 사용 방법을 미리 정해 놓은 라이브러리
						: '요소를 수집해서 저장한다'는 사전적 의미를 가지고 있다.
						: 객체를 수집해서 저장하는 역할을 한다.
						: 주요 인터페이스(List, Set, Map)
						
			4) 메모리를 자동으로 관리한다.
				- 메모리는 자바가 직접 관리한다(개발자가 직접 메모리에 접근 할 수 없도록 설계되어있다).
				- 객체 생성 시 자동적으로 메모리 영역을 찾아서 할당한다.
				- 사용이 완료되면 쓰레기 수집기(Garbage Collector)를 실행시켜 자동적으로 사용하지 않는 객체를 제거한다.
				- 개발자는 메모리 관리의 수고스러움을 덜고, 핵심 기능 코드 작성에 집중할 수 있다.
			
			5) 다양한 애플리케이션을 개발할 수 있다.
				- 다양한 운영체제(OS: Operating System)에서 실행되는 프로그램을 개발할 수 있다.
				- 개발도구와 API를 묶어 에디션(Edition)형태로 정의한다.
					* Java SE(Standard Edition) - 기본 에디션
						: JVM(Java Virtual Machine)과 개발에 필수적인 도구, 라이브러리 API를 정의한다.
						: JRE(JVM+표준클래스 라이브러리), JDK(JRE+개발에 필요한 도구)
					* Java EE(Enterprise Edition) - 서버용 애플리케이션 개발 에디션
						: 분산 환경(네트워크, 인터넷)에서 서버용 애플리케이션을 개발하기 위한 도구 및 라이브러리 API를 정의한다.
				 	
			6) 멀티 스레드(Multi-Thread)를 쉽게 구현할 수 있다.
				* 멀티 스레드
					: 하나의 프로그램이 동시에 여러가지 작업을 처리하는 경우
					: 대용량 작업을 빨리 처리하기 위해 서브 작업으로 분리해서 병렬 처리하는 경우
				- 자바는 스레드 생성 및 제어와 관련된 라이브러리 API를 제공하기 때문에 운영체제에 상관없이 멀티스레드를 쉽게 구현할 수 있다.
					
			7) 동적 로딩(Dynamic Loading)을 지원한다.
				* 동적 로딩: 각 객체들이 필요한 시점에 클래스를 로딩해서 객체를 생성하는 것
				- 애플리케이션을 가볍게 사용할 수 있고, 유지보수를 쉽고 빠르게 할 수 있다.
				  (개발 완료 후 유지보수(수정)이 발생하더라도 해당 클래스만 수정하면 된다)
		
			8) 오픈소스 라이브러리가 풍부하다.
		 		- 검증된 오픈소스 라이브러리를 사용하면 개발 기간을 단축하면서 안전성이 높은 애플리케이션을 쉽게 개발할 수 있다.
		
		1.2.3 자바 가상 기계(JVM)
			* 자바 가상 기계(JVM: Java Virtual Machine) : 바이트 코드로 이루어진 자바 프로그램을 해석하고 실행하는 가상의 운영체제
			- 자바 프로그램은 바이트 코드로 되어있기 때문에 일반 운영체제는 자바 프로그램을 바로 실행할 수 없다.
			- 바이트 코드는 모든 JVM에서 동일한 실행 결과를 보장한다.
			- JVM은 운영체제에 종속적이다(운영체제에 맞게 설치되어야 한다).
			- JDK 또는 JRE를 설치하면 자동으로 설치된다(JDK와 JRE가 운영체제에 맞아야한다).
			* 자바 프로그램의 실행 단계
				: 개발자가 .java 파일(소스파일)을 작성한다. -> 소스파일을 컴파일러(javac.exe)로 컴파일한다. -> .class 파일 생성(바이트 코드 파일)
				  -> JVM 구동명령어(java.exe)로 바이트 코드 파일을 해석한다. -> 해당 운영페제에 맞게 기계어로 번역된다.


	1.3 자바 개발 환경 구축
	
		1.3.1 자바 개발 도구(JDK)설치
		
		1.3.2 API도큐먼트
			* API(Application Programming Interface) : 자바 프로그램을 개발하기 위해 JDK에서 제공하는 표준 클래스 라이브러리
			* API도큐먼트
				: 방대한 API를 쉽게 검색할 수 있도록 제공하는 HTML형식의 도큐먼트
				: "http://docs.oracle.com/javase/8/docs/api"
	
	
	1.4 자바 프로그램 개발 순서
	
		1.4.1 소스 작성에서부터 실행까지
			- 자바 프로그램 개발 순서
				.java 소스 파일 작성 -> 컴파일러(javac.exe)로 바이트 코드 파일(.class)생성 -> JVM 구동 명령어(java.exe)로 실행
			- 컴파일 예시(소스 파일 명 : Hello.java)
				'javac Hello.java' -> Hello.class 파일 생성
			- 바이트 코드 파일은 완전한 기계어가 아니므로 단독으로 실행할 수 없고 JVM이 실행되어야 한다.
			- JVM 실행 예시(바이트 코드 파일 명 : Hello.class)
				'java Hello' -> Hello.class 실행 (주의 : java.exe로 바이트 코드 파일을 실행할 때에는 .class 확장명을 제외한 이름을 입력한다.)
			- java.exe 명령어가 실행되면 JVM은 바이트 코드 파일을 메모리로 로드하고 최적의 기계어로 번역한다. 그리고 main()메소드를 찾아 실행시킨다.
			
		1.4.2 프로그램 소스 분석
			- 자바 실행 프로그램의 구성(class 블록, main() method 블록)
				(1) class : 필드 또는 메소드를 포함하는 블록
				(2) method : 어떤 일을 처리하는 실행문들을 모아놓은 블록
				----------------------------------------------------------
				public class Hello { // 'Hello'는 class 이름
					// '중괄호 ~ 중괄호'는 class 블록
				}
				----------------------------------------------------------
				
				----------------------------------------------------------
				public static void main(String[] args) { // 'main'은 method 이름
					// '중괄호 ~ 중괄호'는 method 블록
				}
				----------------------------------------------------------
			* main() 메소드
				: 프로그램 실행 진입점(entry point)
				: java.exe로 JVM을 실행시키면 제일 먼저 main()메소드를 찾아서 실행시킨다.
				: 이름을 바꾸면 프로그램이 실행되지 않는다.
			- mehtod 블록에는 실행문이 작성된다. 실행문의 끝에는 반드시 세미콜론(;)을 붙여야한다.
			
			
	1.5 주석과 실행문
		1.5.1 주석 사용하기
			* 주석 : 프로그램 실행과는 상관없이 코드에 설명을 붙인 것
			- 컴파일 과정에서 주석은 무시되고 실행문만 바이트 코드로 번역된다.
			- 주석의 내용에는 작성자, 작성일과 시간, 프로그램의 버전과 변경 이력 등의 정보, 주요 코드에 대한 설명 등이 포함된다.
			- 문자열(" ") 내부에는 쓸 수 없다.(데이터로 인식된다)
			----------------------------------------------------------
			//			: '//' 부터 라인 끝까지 주석으로 처리한다.(행 주석)
			/* ~ */		: '/* ~ */' 사이에 있는 모든 범위를 주석으로 처리한다. (범위 주석)
			/** ~ */	: 도큐먼트 주석, javadoc.exe 명령어로 API 도큐먼트를 생성하는데 사용
			----------------------------------------------------------
			
		1.5.2 실행문과 세미콜론(;)
			* 실행문 : 변수 선언, 값 저장, 메소드 호출에 해당하는 코드
			- 실행문의 마지막에 반드시 세미콜론(;)을 붙여서 실행문이 끝났을음 표시해야 한다.
			----------------------------------------------------------
			int x = 1;					// 변수 x를 선언하고 1을 저장
			int y = 2;					// 변수 y를 선언하고 2를 저장
			int result = x + y;			// 변수 result를 선언하고 변수 x와 y를 더한 값을 저장
			System.out.println(result);	// 콘솔에 변수 result값을 출력하는 메소드 호출
			----------------------------------------------------------
				
				