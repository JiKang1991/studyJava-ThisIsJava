	chapter001 startJava

	-- Table of contents --
		1.1 프로그래밍 언어란?
		1.2 자바란?
		1.3 자바 개발 환경 구축
		1.4 자바 프로그램 개발 순서
		1.5 주석과 실행문
		1.6 이클립스 설치
	-----------------------
	
	1.1 프로그래밍 언어란?
	
		1) 기계어(machine language)
	 		1-1) 컴퓨터가 이해할 수 있는 언어
	 		1-2) 0과 1로 이루어진 이진 코드, 사람이 이해하기 어렵다.
	 	
	 	2) 프로그래밍 언어
	 		2-1) 사람의 언어와 기계어의 다리역할을 하는 언어
	 		2-2) 고급 언어와 저급언어로 구분할 수 있다.
	 			(1) 고급 언어
	 				- 일반적으로 프로그래밍 언어라고 할 때 의미하는 것이다. ex) C, C++, Java
		 			- 프로그래밍 언어중에서 사람이 쉽게 이해할 수 있는 언어를 말한다.
		 			- 컴파일(compile) 과정을 통해서 기계어로 변환해야 한다.
	 				* 소스(source) : 고급 언어들로 작성된 내용
	 				* 컴파일러(compiler) : 소스를 기계어로 변환하는 소프트웨어
	 				* 프로그램(program) : 컴퓨터에서 특정 목적을 수행하기 위해 소스를 기계어로 번역한 것
	 			(2) 저급 언어
		 			- 기계어에 가까운 언어 ex) 어셈블리어
		 			- 사람이 쉽게 이해할 수 없기 때문에 배우기가 매우 까다롭다.
	 			
	 
	 1.2 자바란?
	 
	 1.3 자바의 특징
	 
	 	1) 이식성이 높은 언어이다.
	 		* 이식성 : 서로 다른 실행환경을 가진 시스템 간에 프로그램을 옮겨 실행할 수 있는 것
	 		- 일반적으로 하나의 실행환경에 최적화되어있는 프로그램을 다른 실행환경(OS)에서 실행하려면
	 		  프로그램 소스 파일을 수정하여 재컴파일 과정을 거쳐야한다. 
	 		- 자바 언어로 개발된 프로그램은 소스 파일을 다시 수정하지 않아도,
	 		  자바 실행 환경(JRE: Java Runtime Environment)이 설치되어 있는 모든 운영체제에서 실행 가능하다.
	 	
	 	2) 객체 지향 언어이다.
	 		* 객체 지향 언어 : 객체 지향 프로그래밍에 사용되는 언어
	 		* 객체 지향 프로그래밍(OOP: Object Oriented Programming)
	 			: 프로그램을 개발하는 하나의 기법으로 부품에 해당하는 객체들을 먼저 만들고, 이것들을 하나씩 조립 및 연결해서
	 			  전체 프로그램을 완성하는 기법이다.
	 		- 객체 지향 언어가 가져야 할 캡슐화, 상속, 다형성 기능을 완벽하게 지원하고 있다.
	 		
	 	3) 함수적 스타일 코딩을 지원한다.
	 		* 함수적 프로그래밍
	 			: 데이터를 변환하는 함수의 조합으로 구성되는 프로그램 작성 방법
	 			: 함수의 출력은 입력에 의해서만 정해지고, 함수를 실행하는 명령어를 내포한 구조로 연결하여 프로그램을 구현한다.
	 		- 함수적 스타일 코딩의 장점
	 			(1) 대용량 데이터의 병렬 처리에 적합하다.
	 			(2) 이벤트 지향 프로그래밍에 적합하다.
	 				* 이벤트 지향 프로그래밍
	 					: 특정 이벤트가 발생했을 때 해당 이벤트에 맞는 동작을 실행하게 하는 방향으로 프로그래밍하는 것
	 		- 자바 8부터 함수적 프로그래밍을 위해 람다식(Lambda Expressions)을 지원한다.
	 		  람다식을 사용하면 컬렉션(Collection)의 요소를 필터링, 매핑, 집계 처리하는데 쉬워지고 코드가 간결해진다.
	 			* 람다식
	 				: 익명 함수(anonymous function)를 생성하기 위한 식이다.
	 				: 객체 지향 언어보다는 함수 지향 언어에 가깝다.
	 				: 매개 변수를 가진 코드 블록의 형태를 가지지만 런타임 시에는 익명 구현 객체를 생성한다.
	 			* 컬렉션(Collection)
	 				: 프레임 워크(Framework) = 사용 방법을 미리 정해 놓은 라이브러리
	 				: '요소를 수집해서 저장한다'는 사전적 의미를 가지고 있다.
	 				: 객체를 수집해서 저장하는 역할을 한다.
	 				: 주요 인터페이스(List, Set, Map)
	 				
	 	4) 메모리를 자동으로 관리한다.
	 	
	 	
	 	5) 다양한 애플리케이션을 개발할 수 있다.
	 	
	 	6) 멀티 스레드(Multi-Thread)를 쉽게 구현할 수 있다.
	 	
	 	7) 동적 로딩(Dynamic Loading)을 지원한다.
	 	
	 	8) 오픈소스 라이브러리가 풍부하다.