	chapter005 reference type
	
	-- Table of contents --
		5.1 데이터 타입 분류
		5.2 메모리 사용 영역
		5.3 참조 변수의 ==, != 연산
		5.4 null과 NullPointerException
		5.5 String 타입
		5.6 배열 타입
		5.7 열거 타입
	-----------------------
	5.1 데이터 타입 분류
		* 참조 타입 : 객체의 번지를 참조하는 타입
			(1) 배열
			(2) 열거
			(3) 클래스
			(4) 인터페이스
		- 참조 타입을 이용해서 선언된 변수는 메모리의 번지를 값으로 갖는다.
		  기본 타입을 이용해서 선언된 변수는 실제 값(리터럴)을 변수 안에 저장한다.
		----------------------------------------------------------
			기본타입변수				참조변수
			  실제값					100번지 ----------> 100번지(객체)
		----------------------------------------------------------
		- 스택 영역 : 변수가 생성되는 메모리 영역(기본변수, 참조변수)
		- 힙 영역 : 객체가 생성되는 메모리 영역
		
	
	5.2 메모리 사용 영역
		- java.exe로 JVM이 시작되면 JVM은 운영체제에서 할당받은 메모리영역(Runtime Data Area)를
		  (1) 메소드 영역(클래스(런타임 상수풀, 필드/메소드 데이터, 메소드 코드, 생성자 코드),
		  (2) 힙 영역(객체, 배열),
		  (3) 스레드(JVM 스택(프레임(변수)))
		  로 구분해서 사용한다.
		  
	5.2.1 메소드 영역
		- 코드에서 사용되는 클래스(~.class)들을 클래스 로더로 읽어 클래스 별로
		  (1) 런타임 상수풀
		  (2) 필드 데이터
		  (3) 메소드 데이터
		  (4) 메소드 코드
		  (5) 생성자(constructor) 코드
		- JVM이 시작할 때 생성되고 모든 스레드가 공유하는 영역이다.
		
	5.2.2 힙 영역
		- 객체와 배열이 생성되는 영역
		- 힙 영역에 생성된 객체와 배열은 JVM 스택 영역의 변수나 다른 객체의 필드에서 참조한다.
		- 참조하는 변수나 필드가 없다면 의미없는 객체로 쓰레기로 취급하고
		  JVM은 Garbage Collector를 실행시켜 스레기 객체를 힙 영역에서 자동으로 제거한다
		- 객체를 제거하기위해 별도의 코드를 작성할 필요가 없고
		  자바는 코드로 객체를 직접 제거시키는 방법을 제공하지 않는다.
	
	5.2.3 스레드(JVM 스택(Stack) 영역)
		- 각 스레드마다 하나의 JVM 스택 영역이 존재한다.
		- 추가적으로 스레드를 생성하지 않았다면 main 스레드만 존재하며 JVM 스택도 하나이다.
		- JVM 스택은 메소드를 호출할 때 마다 프레임(Frame)을 추가(push)하고 메소드가 종료되면
		  해당 프레임을 제거(pop)하는 동작을 수행한다.
		- 예외 발생시 printStackTrace() 메소드로 보여주는 Stack Trace의 각 라인은 하나의 프레임을 표현한다.
		- 프레임 내부에는 로컬 변수 스택이 있다. 기본 타입 변수와 참조 타입 변수가 추가(push)되거나 제거(pop)된다.
		- 변수가 이 영역에 생성되는 시점은 초기화가 될 때, 즉 최초로 변수에 값이 저장될 때이다.
		- 변수는 선언된 블록 안에서만 스택에 존재하고 블록을 벗어나면 스택에서 제거된다.
		- 선언된 변수는 실행 순서에 따라서 스택에 생성되고 소멸된다.
		----------------------------------------------------------
		(1) char v1 = 'A';
		(2) if (v1 == 'A') {
				int v2 = 100;
				double v3 = 3.14;
			}
		(3) boolean v4 = true;
		(4) int[] scores = {10, 20, 30}
		
		  '(1)' 실행  ->   '(2)'실행    ->  '(3)' 실행	  ->    '(4)' 실행
		| stack 영역 |  | stack 영역  |	| stack 영역  |	|    stack 영역   |
		| (v1, 'A') |  | (v3, 3.14) |	| (v4, true) |	| (scores, 5번지)-|->|
		-------------  | (v2, 100 )	|	| (v1, 'A' ) |	| (  v4  , true) |	|
					   | (v1, 'A' ) |   --------------	| (  v1  ,  'A') |	|
					   --------------					------------------	|
																			|
																			|
													| 	   힙 영역 	    |	V
													| 5번지(10, 20, 30)<-|----
													---------------------
													
		----------------------------------------------------------