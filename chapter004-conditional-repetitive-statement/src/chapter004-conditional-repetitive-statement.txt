	chapter004 conditional repetitive statement
	
	-- Table of contents --
		4.1 코드 실행 흐름 제어
		4.2 조건문(if문, switch문)
		4.3 반복문(for문, while문, do-while문)
	-----------------------
	
	4.1 코드 실행 흐름 제어
		* 흐름 제어문(제어문) : 자바 프로그램의 기본 실행 흐름(main() 메소드의 시작 중괄호에서 시작해서
							끝 중괄호까지 위에서 부터 아래로)을 개발자가 원하는 방향으로 바꿀 수 있도록 해주는 것.
						  : 조건식 + 중괄호 블록으로 구성
						  : 조건식의 연산결과에 따라 블록 내부의 실행 여부 결정
		----------------------------------------------------------
		public static void main(String[] args) {
					 |
			  정상흐름 | 		  <--------------
					 |		  |				^
		   건너뜀		 V		  V				|
		<--------- 제어문(조건식) {			| 루핑
		|				|					|	
		|    빠져나옴		|					|
		|<--------------|					|		(다양한 실행 흐름 발생)
		|				V		되돌아감		|
		|				-------------------->
		|			}
		V 
		---------------->
						|
						| 정상흐름
						V
		----------------------------------------------------------
		- 조건문(if, switch) : 실행 완료 되었을 경우 제어문 블록을 빠져나와 정상 흐름으로 진행된다.
		- 반복문(for, while, do-while : 실행 완료 되었을 경우 제어문 처음으로 다시 되돌아가 반복 실행(루핑)한다.
		- 제어문 블록 내무에는 또 다른 제어문을 사용할 수 있다.
		
		
	4.2 조건문(if, switch)
	4.2.1 if문
		- 조건식의 결과에 따라 블록 실행 여부가 결정된다.
		- 조건식에는 true 또는 false 값을 산출할 수 있는 연산식이나, boolean 변수가 올 수 있다.
		- 조건식이 true이면 블록을 실행하고 false이면 블록을 실행하지 않는다. 
		----------------------------------------------------------
							  | 
							  V
					<---- if(조건식) {
					|		  |
		조건식이false	|		  | 조건식이 true
					|		  |
					|	  }	  | 
					V		  |
					--------->|
							  V
		----------------------------------------------------------	
		
	4.2.2 if - else문
		- if문의 조건식이 true이면 if문의 블록이 실행되고, 조건식이 false이면 else 블록이 실행된다.
		- 조건식의 결과에 따라 한 블록의 내용만 실행하고 전체 if문을 벗어나게 된다.
		----------------------------------------------------------
							  | 
							  V
					<---- if(조건식) {
					|		  |
		조건식이false	|		  | 조건식이 true
					|		  V
					|		  ------------------>
					V	  }	else {	   			| 
					---------->	조건식이false  	|
							  |					|
						  }	  |					V
						 	  | <----------------
						  	  V
		----------------------------------------------------------
		
	4.2.3 if - else if - else문
		- 조건문이 여러개인 if문
		- 처음 if문의 조건식이 false일 경우 다른 조건식의 결과에 따라 실행 블록을 선택할 수 있다.
		- if 블록의 끝에 else if문을 붙이면 된다.
		- else if문의 수는 제한이 없으며 여러개의 조건식 중 true가 되는 블록만 실행하고 전체 if문을 벗어난다.
		- else if 블록의 마지막에는 else 블록을 추가할 수 있다.
		  모든 조건식이 false일 령우 else블록을 실행하고 if문을 벗어난다.
		----------------------------------------------------------
							  | 
							  V
					<---- if(조건식1) {
				 	|		  |
	   조건식1이 false|		  | 조건식이 true
					|		  V
					V		  ------------------>
					----->}	else if(조건식2) {	| 
					|		  |	조건식2가 true  	|
	   조건식2가 false|		  V					|
					|		  ----------------->|
					V	  } else {				|
					----------> 조건식 1 및		|
							  | 조건식 2가 false	|
						  }	  |					V
						 	  | <----------------
						  	  V
		----------------------------------------------------------
		
	4.2.4 중첩 if문
		* 중첩 if문 : if문의 블록 내부에 또 다른 if문을 사용하는 것이다.
		- if문 뿐 아니라 다른 제어문도 서로 중첩시킬 수 있다.
		----------------------------------------------------------
								  | 
							  	  V
					<--------- if(조건식1) {
				 	|	  				  |
	   				|		  조건식1이 true| 
					|					  V
					|				 <--if(조건식2) {
					|				 |	  |			
					|  				 |	  | 조건식 2가 true
					|  조건식 2가 false|	  V
					|				 |	  --------->	
	   조건식1이 false|				 |	} else {   |
					|				 V			   |
					|				 ------->	   |
					|				 	}   |	   V
					|				 		| <-----
					|				 		V
					|				 		------------>		   				 
					|			} else {				| 
					V		  				  			|
	  		  		---------------->					|
							  		|					|
							    } 	|					V
									| <------------------
									V								  
		----------------------------------------------------------
	
	4.2.5 switch문
		- 변수가 어떤 값을 갖느냐에 따라 실행문이 선택된다.
		- if문보다 코드가 간결하다.
		- 괄호 안의 값과 동일한 값을 갖는 case로 가서 실행문을 실행시킨다.
		- 동일한 값의 case가 없으면 default로 가서 실행문을 실행시킨다. 
		- default는 생략가능하다.
		- 하나의 case를 실행하고 다음 case를 실행하지 않도록 하기 위해
		  각 case의 실행문 마지막에 break를 명시한다.
		- break가 없으면 괄호 안의 값과 동일한 case를 실행하고
		  그 아래에 있는 case문을 모두 연달아 실행한다.
		- 자바 6까지는 괄호 안에 정수타입의 변수를 사용할 수 있으며,
		  자바 7부터는 String타입의 변수도 사용할 수 있다.		
		----------------------------------------------------------
							|
							V
		<-------------switch(변수) {
		|------------->	case 값1:
  		|  변수가 값1일 경우	| 
		|					V 
		|					break;---------->
		|------------->	case 값2:			|	
		|  변수가 값2일 경우	|				|
		|					V				|
		|					break;--------->|
		V------------->	default:			|
		  값1,2 모두 아닐 경우	|				|
					}		|<--------------V
							V
		----------------------------------------------------------		
		  
	4.3 반복문
		- 어떤 작업(코드들)이 반복적으로 실행되도록 할 때 사용한다.
	4.3.1 for문
		- 반복 횟수를 알고 있을 때 주로 사용한다.
		----------------------------------------------------------
		int sum = 0;
		for (int i = 1; i <= 100; i++) {
			sum = sum + i;
		}
		System.out.println("1~100까지의 합 : " + sum);
		----------------------------------------------------------
		----------------------------------------------------------
					| 정상흐름
					| 
			|<------|----------
			|		|	--->| ^ |<-- |<-------
			|		|   ^	| | |  ^ |       ^ 
			|		V	|	V | V  | V		 |
			|	for(초기화식; 조건식; 증감식) {   |
			|				  |				 |
 	  조건식	| false 		  | 조건식이 true	 |	
 	  for문	| 종료			  V				 |		중괄호 안쪽의 실행문이 반복된다.
			|				실행문;			 |
			|				  |				 |
			|	}			  |				 |
			V	  			  V				 |
			------->|		  -------------->|	
			  		| 정상흐름
			  		V
		
								 true			
		초기화식 실행 -> 조건식 평가 -------> 실행문 실행 -> 실행문 종료 -> 증감식 실행 -> 조건식 평가 ...
						  |
		  				  V	  false
		  				  -------------> for문 종료		  				  		
		----------------------------------------------------------
		- 초기화식 생략 가능
		----------------------------------------------------------
		int i = 1;
		for( ; i <= 100; i++) { ... }
		----------------------------------------------------------
		- 복수의 초기화식 증감식 사용 가능(','로 구분한다)
		----------------------------------------------------------
		for(int i = 0, j = 100; i <= 50 && j >= 50; i++, j--){...}
			 초기화식1 , 초기화식2;			조건식;	  증감식1, 증감식2
		----------------------------------------------------------
		- 초기화식에 선언된 변수는 for문 블록 내부에서 사용되는 로컬변수이다.
		- 초기화식에서 루프 카운트 변수를 선언할 때 부동소수점 타입을 사용하지 말아야한다.
		  0.1은 float 타입으로 정확하게 표현할 수 없기 때문에 증감식을 실행할 때마다
		  0.1보다 약간 큰 실제값이 더해진다. 이로인해 원하는 만큼의 반복이 실행되지 않는다.
		  (ForFloatcounterExample.java 참고)
		* 중첩 for문 : for문이 다른 for문을 내포하는 것
				   : 바깥쪽 for문이 한 번 실행할 때마다 중첩된 for문은 지정 횟수만큼 반복해서 돌다가
				     바깥쪽 for문으로 돌아간다.		
				     (ForMultiplicationTableExample.java 참고)
	
	4.3.2 while문
		- 조건에 따라 반복할 때 주로 사용한다.
		- 조건식이 true일 경우에 계속해서 반복한다.
		- 조건식에는 비교 또는 논리 연산식이 주로 온다.
		----------------------------------------------------------
					  |정상흐름					 
		  |	<---------|--
		  |			  | ^ |<--------------		
		  |			  | | |				 ^
		  |			  V	| V				 |
		  |	    while(조건식) {			 |
		  |				|				 |
		  |				| 조건식 true		 |	
		  |				V				 |		중괄호 안쪽의 실행문이 반복된다.
		  |			  실행문;				 |
		  |				|				 |
		  |		}		|				 |
		  |				V				 |
		  V				---------------->|
		  -------->|
		  		   | 정상흐름
		  		   V
		  		   
		  		   
				   true		
		조건식 평가 -------> 실행문 실행 -> 실행문 종료 -> 조건식 평가 ...
			|
		  	V	  false
		  	-------------> while문 종료	
		----------------------------------------------------------
		- while문 내에서 계속 누적되는 값을 갖는 변수는 while문 시작 전에 미리 선언해 놓아야 한다.
		- 조건식에는 boolean 변수나 true/false 값을 산출하는 어떠한 연산식이든 올 수 있다.
		- 만약 조건식에 true를 사용하면 무한 루프를 돌게 된다.
		* System.in.read(); : 키보드로부터 입력된 키 코드를 리턴하는 메서드
		----------------------------------------------------------
		숫자			알파벳									기능키						방향키
		0 = 48		A = 65	 N = 78	  a = 97	n = 110		Backspace = 8				left = 37
		1 = 49		B = 66	 O = 79	  b = 98	o = 111		Tab = 9						up = 38
		2 = 50		C = 67	 P = 80	  c = 99	p = 112		Enter = [CR = 13, LF = 10]	right = 39
		3 = 51		D = 68 	 Q = 81	  d = 100	q = 113		Shift = 16					down = 40
		4 = 52		E = 69	 R = 82	  e = 101	r = 114		Ctrl = 17
		5 = 53		F = 70	 S = 83	  f = 102	s = 115		Alt = 18
		6 = 54		G = 71	 T = 84	  g = 103	t = 116		ESC = 27
		7 = 55		H = 72	 U = 85	  h = 104	u = 117		Space = 32
		8 = 56		I = 73	 V = 86	  i = 105	v = 118		Pageup = 33
		9 = 57		J = 74	 W = 87	  j = 106	w = 119		Pagedown = 34
					K = 75	 X = 88	  k = 107	x = 120
					L = 76	 Y = 89	  l = 108	y = 121
					M = 77	 Z = 90	  m = 109	z = 122
		----------------------------------------------------------
		
	4.3.3 do-while문
		- 블록 내부의 실행문을 우선 실행시키고 실행 결과에 따라서
		  반복 실행을 계속할지 결정하는 경우에 사용한다.
		- while() 뒤에 세미콜론(;)을 반드시 붙여야 한다.
		----------------------------------------------------------
					  | 최초실행
					  |
					  | |<-----------
			do{		  | |			^
					  V V			|
					 실행문;			|
					   |			| 조건식이 true
					   V			|
			} while (조건식);------->	|
					   |
					   | 조건식이 false일 경우(do-while문 종료)
					   V
		----------------------------------------------------------
		* Scanner.nextLine() : 입력된 문자열을 한번에 읽는다.
		 문자열을 저장하기위해 String 변수를 필요로 한다.
		 (System.in.read()의 경우 하나의 키 코드만 읽는다)
		 ----------------------------------------------------------
		 Scanner scanner = new Scanner(System.in);		// Scanner 객체 생성
		 String inputString = scanner.nextLine();		// nextLine() 메소드 호출
		 ----------------------------------------------------------
		 
	4.3.4 break문
		- 반복문과 switch문을 실행 중지할 때 사용한다.
		----------------------------------------------------------
			for(...){					while(...){
				  |								|
				  V								V
				break; --->|				  break; --->|
				  |		   |					|		 |
				  X		   |					X		 |
				  V		   |					V		 |
				}  		   |			}				 |
						   V							 V
				  |<--------					|<--------
				  V	   							V
		----------------------------------------------------------
		- 대개 if문과 같이 사용되어 if문의 조건식에 따라 for문과 while문을 종료할 때 사용한다.
		- 반복문이 중첩되어 있을 경우 break문은 가장 가까운 반복문만 종료하고 바깥쪽 반복문은 종료시키지 않는다.
		- 중첩된 반복문에서 바깥쪽 반복문까지 종료시키려면
		  바깥쪽 반복문에 이름(라벨)을 붙이고, "break 이름;"을 사용하면 된다.
		  ----------------------------------------------------------
				|<-----------------			Label: for(...){	  
				V				  ^					|	 
			for(...){			  |					V
				  |				  |				for(...){	
				  V				  |					break Label; --->|		
				for(...){		  |						  |	 	     |
					break; --->|  |						  X	         |				  
				  	|		   |  |						  V		     |						  
				    X		   |  |				}				     |
				    V		   |  |					|			     |
				} 	 		   |  |					X				 |
							   V  |					V				 |
					|<----------  |  		}						 V
				  	V	 		  |					|<----------------
			}		------------->|					V										
		----------------------------------------------------------
		
	4.3.5 continue문
		- 반복문에서 사용한다.
		- 블록 내부에서 continue문시 실행되면 해당 반복문의 조건식으로 이동한다.
		- 반복문을 종료하지 않고 계속 반복을 수행한다.
		- 대개 if문과 함께 사용하며, 특정 조건을 만족하는 경우에
		  continue문을 실행해서 그 이후의 문장을 실행하지 않고 다음 반복으로 넘어간다.
		----------------------------------------------------------
				|<-------------					|<-------------
				V			  ^					V			  ^
			for(...){		  |				while(...){ 	  |
				  |			  |						|		  |
				  V			  |						V		  |
				continue; --->|					continue; --->|
					|								|
					X								X
					V								V
			}								}
		----------------------------------------------------------