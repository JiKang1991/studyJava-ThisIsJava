	chapter004 conditional repetitive statement
	
	-- Table of contents --
		4.1 코드 실행 흐름 제어
		4.2 조건문(if문, switch문)
		4.3 반복문(for문, while문, do-while문)
	-----------------------
	
	4.1 코드 실행 흐름 제어
		* 흐름 제어문(제어문) : 자바 프로그램의 기본 실행 흐름(main() 메소드의 시작 중괄호에서 시작해서
							끝 중괄호까지 위에서 부터 아래로)을 개발자가 원하는 방향으로 바꿀 수 있도록 해주는 것.
						  : 조건식 + 중괄호 블록으로 구성
						  : 조건식의 연산결과에 따라 블록 내부의 실행 여부 결정
		----------------------------------------------------------
		public static void main(String[] args) {
					 |
			  정상흐름 | 		  <--------------
					 |		  |				^
		   건너뜀		 V		  V				|
		<--------- 제어문(조건식) {			| 루핑
		|				|					|	
		|    빠져나옴		|					|
		|<--------------|					|		(다양한 실행 흐름 발생)
		|				V		되돌아감		|
		|				-------------------->
		|			}
		V 
		---------------->
						|
						| 정상흐름
						V
		----------------------------------------------------------
		- 조건문(if, switch) : 실행 완료 되었을 경우 제어문 블록을 빠져나와 정상 흐름으로 진행된다.
		- 반복문(for, while, do-while : 실행 완료 되었을 경우 제어문 처음으로 다시 되돌아가 반복 실행(루핑)한다.
		- 제어문 블록 내무에는 또 다른 제어문을 사용할 수 있다.
		
		
	4.2 조건문(if, switch)
	4.2.1 if문
		- 조건식의 결과에 따라 블록 실행 여부가 결정된다.
		- 조건식에는 true 또는 false 값을 산출할 수 있는 연산식이나, boolean 변수가 올 수 있다.
		- 조건식이 true이면 블록을 실행하고 false이면 블록을 실행하지 않는다. 
		----------------------------------------------------------
							  | 
							  V
					<---- if(조건식) {
					|		  |
		조건식이false	|		  | 조건식이 true
					|		  |
					|	  }	  | 
					V		  |
					--------->|
							  V
		----------------------------------------------------------	
		
	4.2.2 if - else문
		- if문의 조건식이 true이면 if문의 블록이 실행되고, 조건식이 false이면 else 블록이 실행된다.
		- 조건식의 결과에 따라 한 블록의 내용만 실행하고 전체 if문을 벗어나게 된다.
		----------------------------------------------------------
							  | 
							  V
					<---- if(조건식) {
					|		  |
		조건식이false	|		  | 조건식이 true
					|		  V
					|		  ------------------>
					V	  }	else {	   			| 
					---------->	조건식이false  	|
							  |					|
						  }	  |					V
						 	  | <----------------
						  	  V
		----------------------------------------------------------
		
	4.2.3 if - else if - else문
		- 조건문이 여러개인 if문
		- 처음 if문의 조건식이 false일 경우 다른 조건식의 결과에 따라 실행 블록을 선택할 수 있다.
		- if 블록의 끝에 else if문을 붙이면 된다.
		- else if문의 수는 제한이 없으며 여러개의 조건식 중 true가 되는 블록만 실행하고 전체 if문을 벗어난다.
		- else if 블록의 마지막에는 else 블록을 추가할 수 있다.
		  모든 조건식이 false일 령우 else블록을 실행하고 if문을 벗어난다.
		----------------------------------------------------------
							  | 
							  V
					<---- if(조건식1) {
				 	|		  |
	   조건식1이 false|		  | 조건식이 true
					|		  V
					V		  ------------------>
					----->}	else if(조건식2) {	| 
					|		  |	조건식2가 true  	|
	   조건식2가 false|		  V					|
					|		  ----------------->|
					V	  } else {				|
					----------> 조건식 1 및		|
							  | 조건식 2가 false	|
						  }	  |					V
						 	  | <----------------
						  	  V
		----------------------------------------------------------
		
	4.2.4 중첩 if문
		* 중첩 if문 : if문의 블록 내부에 또 다른 if문을 사용하는 것이다.
		- if문 뿐 아니라 다른 제어문도 서로 중첩시킬 수 있다.
		----------------------------------------------------------
								  | 
							  	  V
					<--------- if(조건식1) {
				 	|	  				  |
	   				|		  조건식1이 true| 
					|					  V
					|				 <--if(조건식2) {
					|				 |	  |			
					|  				 |	  | 조건식 2가 true
					|  조건식 2가 false|	  V
					|				 |	  --------->	
	   조건식1이 false|				 |	} else {   |
					|				 V			   |
					|				 ------->	   |
					|				 	}   |	   V
					|				 		| <-----
					|				 		V
					|				 		------------>		   				 
					|			} else {				| 
					V		  				  			|
	  		  		---------------->					|
							  		|					|
							    } 	|					V
									| <------------------
									V								  
		----------------------------------------------------------
	
	4.2.5 switch문
		- 변수가 어떤 값을 갖느냐에 따라 실행문이 선택된다.
		- if문보다 코드가 간결하다.
		- 괄호 안의 값과 동일한 값을 갖는 case로 가서 실행문을 실행시킨다.
		- 동일한 값의 case가 없으면 default로 가서 실행문을 실행시킨다. 
		- default는 생략가능하다.
		- 하나의 case를 실행하고 다음 case를 실행하지 않도록 하기 위해
		  각 case의 실행문 마지막에 break를 명시한다.
		- break가 없으면 괄호 안의 값과 동일한 case를 실행하고
		  그 아래에 있는 case문을 모두 연달아 실행한다.
		- 자바 6까지는 괄호 안에 정수타입의 변수를 사용할 수 있으며,
		  자바 7부터는 String타입의 변수도 사용할 수 있다.		
		----------------------------------------------------------
							|
							V
		<-------------switch(변수) {
		|------------->	case 값1:
  		|  변수가 값1일 경우	| 
		|					V 
		|					break;---------->
		|------------->	case 값2:			|	
		|  변수가 값2일 경우	|				|
		|					V				|
		|					break;--------->|
		V------------->	default:			|
		  값1,2 모두 아닐 경우	|				|
					}		|<--------------V
							V
		----------------------------------------------------------		
		  
		  
		  